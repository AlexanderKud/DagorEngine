diff --git a/prog/3rdPartyLibs/metal/spirv2Metal/spirv_msl.cpp b/prog/3rdPartyLibs/metal/spirv2Metal/spirv_msl.cpp
index 4687742b6a8..dd6715eae0e 100644
--- a/prog/3rdPartyLibs/metal/spirv2Metal/spirv_msl.cpp
+++ b/prog/3rdPartyLibs/metal/spirv2Metal/spirv_msl.cpp
@@ -7881,21 +7881,21 @@ void CompilerMSL::emit_instruction(const Instruction &instruction)
 		break;
 
 	case OpFMul:
-		if (msl_options.invariant_float_math || has_decoration(ops[1], DecorationNoContraction))
+		if (msl_options.invariant_float_math || (msl_options.honor_no_contraction && has_decoration(ops[1], DecorationNoContraction)))
 			MSL_BFOP(spvFMul);
 		else
 			MSL_BOP(*);
 		break;
 
 	case OpFAdd:
-		if (msl_options.invariant_float_math || has_decoration(ops[1], DecorationNoContraction))
+		if (msl_options.invariant_float_math || (msl_options.honor_no_contraction && has_decoration(ops[1], DecorationNoContraction)))
 			MSL_BFOP(spvFAdd);
 		else
 			MSL_BOP(+);
 		break;
 
 	case OpFSub:
-		if (msl_options.invariant_float_math || has_decoration(ops[1], DecorationNoContraction))
+		if (msl_options.invariant_float_math || (msl_options.honor_no_contraction && has_decoration(ops[1], DecorationNoContraction)))
 			MSL_BFOP(spvFSub);
 		else
 			MSL_BOP(-);
@@ -8323,7 +8323,7 @@ void CompilerMSL::emit_instruction(const Instruction &instruction)
 	case OpVectorTimesMatrix:
 	case OpMatrixTimesVector:
 	{
-		if (!msl_options.invariant_float_math && !has_decoration(ops[1], DecorationNoContraction))
+		if (!msl_options.invariant_float_math && !(msl_options.honor_no_contraction && has_decoration(ops[1], DecorationNoContraction)))
 		{
 			CompilerGLSL::emit_instruction(instruction);
 			break;
@@ -8365,7 +8365,7 @@ void CompilerMSL::emit_instruction(const Instruction &instruction)
 
 	case OpMatrixTimesMatrix:
 	{
-		if (!msl_options.invariant_float_math && !has_decoration(ops[1], DecorationNoContraction))
+		if (!msl_options.invariant_float_math && !(msl_options.honor_no_contraction && has_decoration(ops[1], DecorationNoContraction)))
 		{
 			CompilerGLSL::emit_instruction(instruction);
 			break;
@@ -15400,7 +15400,7 @@ CompilerMSL::SPVFuncImpl CompilerMSL::OpCodePreprocessor::get_spv_func_impl(Op o
 	case OpFAdd:
 	case OpFSub:
 		if (compiler.msl_options.invariant_float_math ||
-		    compiler.has_decoration(args[1], DecorationNoContraction))
+        (compiler.msl_options.honor_no_contraction && compiler.has_decoration(args[1], DecorationNoContraction)))
 		{
 			return opcode == OpFAdd ? SPVFuncImplFAdd : SPVFuncImplFSub;
 		}
@@ -15412,7 +15412,7 @@ CompilerMSL::SPVFuncImpl CompilerMSL::OpCodePreprocessor::get_spv_func_impl(Op o
 	case OpVectorTimesMatrix:
 	case OpMatrixTimesMatrix:
 		if (compiler.msl_options.invariant_float_math ||
-		    compiler.has_decoration(args[1], DecorationNoContraction))
+		    (compiler.msl_options.honor_no_contraction && compiler.has_decoration(args[1], DecorationNoContraction)))
 		{
 			return SPVFuncImplFMul;
 		}
diff --git a/prog/3rdPartyLibs/metal/spirv2Metal/spirv_msl.hpp b/prog/3rdPartyLibs/metal/spirv2Metal/spirv_msl.hpp
index b1abd12afdd..7a938cafccb 100644
--- a/prog/3rdPartyLibs/metal/spirv2Metal/spirv_msl.hpp
+++ b/prog/3rdPartyLibs/metal/spirv2Metal/spirv_msl.hpp
@@ -341,5 +341,8 @@ public:
 		// Enables use of "fma" intrinsic for invariant float math
 		bool invariant_float_math = false;
 
+    // do we really need those super slow manual functions
+    bool honor_no_contraction = false;
+
 		// Emulate texturecube_array with texture2d_array for iOS where this type is not available
 		bool emulate_cube_array = false;
