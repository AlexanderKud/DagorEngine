macro USE_GBUFFER_PACK_UNPACK(code)
hlsl(code) {
  //reference
  ##if !(hardware.ps4 || hardware.ps5)
  float CubeMapFaceID(float3 v)
  {
    float faceID;
    FLATTEN
    if(abs(v.z) >= abs(v.x) && abs(v.z) >= abs(v.y))
    {
      faceID = (v.z < 0.0) ? 5.0 : 4.0;
    }
    else
    {
      FLATTEN
      if (abs(v.y) >= abs(v.x))
      {
        faceID = (v.y < 0.0) ? 3.0 : 2.0;
      }
      else
      {
        faceID = (v.x < 0.0) ? 1.0 : 0.0;
      }
    }
    return faceID;
  }
  ##endif
  float2 PackNormalMajorAxisIndex(float3 inNormal, uint axisNo)
  {
    uint index = axisNo*0.5f;
    float2 normal = inNormal.xy;
    normal = index == 0 ? inNormal.yz : normal;
    normal = index == 1 ? inNormal.xz : normal;
    return normal;
  }
  float2 PackNormalMajorAxis(float3 inNormal, out uint index)
  {
    index = CubeMapFaceID(inNormal);
    return PackNormalMajorAxisIndex(inNormal, index);
  }

  float3 UnPackNormalMajorAxis(float2 enc, uint faceIndex)
  {
    float3 normal;
    normal.xy = enc;
    normal.z = sqrt(1-dot(normal.xy, normal.xy));
    normal.z = (faceIndex&1) ? -normal.z : normal.z;
    uint index = uint(faceIndex / 2);

    normal = index == 0 ? normal.zxy : normal;
    normal = index == 1 ? normal.xzy : normal;
    return normal;
  }

  #include <hsv_rgb_conversion.hlsl>
  #include <pixelPacking/ColorSpaceUtility.hlsl>
  #define EMISSION_COLOR_REPLACE_ENC 0x3F // min saturation, max hue: replaced by white
  #define EMISSION_COLOR_SUBSTITUTE_ENC 0x0 // min saturation, min hue: used as substitute for the replaced color
  ##if in_editor_assume == no
    #ifndef decodeEmissionColor
    half3 decodeEmissionColor(half emissionEnc)
    {
      return (half3)emission_decode_color_map[(uint)round(emissionEnc * 255)].xyz;
    }
    #endif
  ##else
    //use static array in editor
    #ifndef decodeEmissionColor
    #include <emission_color_map.hlsl>
    half3 decodeEmissionColor(half emissionEnc)
    {
      return EMISSION_COLOR_MAP[(uint)round(emissionEnc * 255)];
    }
    #endif
  ##endif

  half encodeEmissionColor(half3 rgb) // TODO: use emission encode offline
  {
    half3 hsv = half3(rgb_to_hsv(rgb));
    uint emissionI = (uint)round(hsv.x * 0x3F) + ((uint)round(max(hsv.y * 4 - 1, 0)) << 6);
    // 4+1 saturation levels (+1 is for white)
    return ((hsv.y < 1/4.0h) ? EMISSION_COLOR_REPLACE_ENC :
      (emissionI == EMISSION_COLOR_REPLACE_ENC ? EMISSION_COLOR_SUBSTITUTE_ENC : emissionI)) / 255.0h;
  }
  half decodeEmissionStrength(half x)
  {
    return pow2(x) * MAX_EMISSION;
  }
  half encodeEmissionStrength(half x)
  {
    return sqrt(x / MAX_EMISSION);
  }
  half encodeReflectance(half2 reflectance)
  {
    return dot(round(reflectance*15), half2(1.0h/(255.0h/16.0h), 1.0h/255.0h));
  }
  half2 decodeReflectance(half reflectanceEnc)
  {
    reflectanceEnc *= 255.0h/16.0h;
    return half2(floor(reflectanceEnc), frac(reflectanceEnc)*16) / 15;
  }

  //https://johnwhite3d.blogspot.com/2017/10/signed-octahedron-normal-encoding.html
  half2 oct_wrap_so( half2 v )
  {
      return ( 1.0h - abs( v.yx ) ) * select( v.xy >= 0.0h, 1.0h, -1.0h );
  }

  half2 pack_normal_so(half3 n)
  {
      n /= (abs( n.x ) + abs( n.y ) + abs( n.z ));
      n.xy = n.z >= 0.0h ? n.xy : oct_wrap_so( n.xy );
      n.xy = n.xy * 0.5h + 0.5h;
      return n.xy;
  }

  half3 unpack_normal_so(half2 enc)
  {
      enc = enc * 2.0h - 1.0h;

      float3 n;
      n.z = 1.0h - abs( enc.x ) - abs( enc.y );
      n.xy = n.z >= 0.0h ? enc.xy : oct_wrap_so( enc.xy );
      n = normalize( n );
      return n;
  }

  //dice encoding
  half2 encodeNormal(half3 n1, out uint index)
  {
    return PackNormalMajorAxis(n1, index);
  }
  float3 decodeNormal(half2 enc, uint index)
  {
    return UnPackNormalMajorAxis(enc, index);
  }
  half decode_albedo_ao(half3 albedo)
  {
    return saturate(luminance(albedo)*(1/0.04h))*0.9h + 0.1h;//anything darker than charcoal is not physical possible, and is shadow
  }
  uint decode_normal_basis(float4 reflectance_metallTranslucency_shadow)
  {
    return uint(reflectance_metallTranslucency_shadow.w*5.1);
  }

  half3 decodeSpecularColor(half reflectance, half metalness, half3 baseColor)
  {

    half fresnel0Dielectric = 0.16h*pow2(reflectance);
    return lerp(half3(fresnel0Dielectric, fresnel0Dielectric, fresnel0Dielectric),
                                       baseColor*saturate(reflectance*50.0h),
                                       metalness);
  }
}
endmacro
