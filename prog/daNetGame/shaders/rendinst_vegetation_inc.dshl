texture rendinst_shadow_tex;

int branch_mask_render = 0;
interval branch_mask_render : no < 1, yes;

macro TREE_COLORING()
  hlsl(ps) {
    half3 rendinstColor(half3 color, half translucency) {return translucency < 0.01 ? half3(1.0,1.0,1.0) : color;}
    half rendinstColoring(half translucency) {return translucency < 0.01 ? 1 : 0;}
  }
endmacro

macro RENDER_TO_GBUFFER_IMPOSTOR()
  if (compatibility_mode == compatibility_mode_on)
  {
    hlsl(ps) {
      ##if mobile_render != off
        #define FORWARD_NO_STATIC_SHADOW 1
        #if PBR_FORWARD_SHADING
          #define FORWARD_NO_INTERNAL_LUT
        #endif
      ##endif
      #define BLEND_GBUFFER 1
      #define USE_SSS_THIN 1
    }
    WRITE_GBUFFER()
    INIT_SKYLIGHT_PARAMS(ps)
    USE_SKYLIGHT_PARAMS(ps)
  }
  hlsl(ps) {
    ##if compatibility_mode == compatibility_mode_on && mobile_render != deferred
    void render_to_impostor_ps(
      VsOutput input,
      out float4 out_0 : SV_Target0
      ##if mobile_render != off
        #if PBR_FORWARD_SHADING
          , out float4 out_1 : SV_Target1
        #endif
      ##else
        , out float4 out_1 : SV_Target1
      ##endif
      INPUT_VFACE)
    {
      #if SET_UP_MULTIDRAW
        SET_DRAW_CALL_ID(GET_MATERIAL_OFFSET(input));
      #endif
      half alpha, coloring;
      input.normal.xyz = MUL_VFACE(input.normal.xyz);
      #ifdef NEED_ELLIPSOID_NORMAL
      input.normal.xyz =  normalize(lerp(input.normal.xyz, input.ellipsoidNormal.xyz, get_n_ellipsoid_mix()));
      #endif
      UnpackedGbuffer gbuffer = get_impostor_gbuffer(input, alpha, coloring);
      clip(alpha - 0.5);

      float skylight_sun_atten_inv = 1.0 / max(skylight_sun_atten, 0.0001);
      float skylight_ambient_atten_inv = 1.0 / max(skylight_ambient_atten, 0.0001);
      float4 screenPos = 0; /*screen pos make no sence here*/
      init_normal(gbuffer, normalize(gbuffer.normal));
      GBUFFER_OUTPUT ret = encode_gbuffer_exposure(gbuffer, input.pointToEye.xyz, screenPos, 1,
        gbuffer_sun_light_dir.xyz, gbuffer_sun_light_col.xyz*skylight_sun_atten_inv,//fixme: we should not modulate by eclipse
        gbuffer_enviSPH0*skylight_ambient_atten_inv, gbuffer_enviSPH1*skylight_ambient_atten_inv, gbuffer_enviSPH2*skylight_ambient_atten_inv,//divide by skylight_params, so we restore original
        1);
      ##if mobile_render != off
        ret.color.a = alpha;
        out_0 = ret.color;
        #if PBR_FORWARD_SHADING
          gbuffer.shadow = 0;
          GBUFFER_OUTPUT ret_noLit = encode_gbuffer_exposure(gbuffer, input.pointToEye.xyz, screenPos, 1,
            gbuffer_sun_light_dir.xyz, gbuffer_sun_light_col.xyz*skylight_sun_atten_inv,//fixme: we should not modulate by eclipse
            gbuffer_enviSPH0*skylight_ambient_atten_inv, gbuffer_enviSPH1*skylight_ambient_atten_inv, gbuffer_enviSPH2*skylight_ambient_atten_inv,//divide by skylight_params, so we restore original
            1);

          ret_noLit.color.a = gbuffer.material == SHADING_FOLIAGE ? gbuffer.translucency : 0.0f;
          out_1 = ret_noLit.color;
        #endif
      ##else
        ret.sunLight.w = alpha;
        ret.ambientLight.w = gbuffer.material == SHADING_FOLIAGE ? gbuffer.translucency : 0.0f;
        out_0 = ret.sunLight;
        out_1 = ret.ambientLight;
      ##endif // mobile_render != off
    }
    ##else
    void render_to_impostor_ps(
      VsOutput input,
      ##if branch_mask_render == no
      out float4 out_0 : SV_Target0,
      out float4 out_1 : SV_Target1,
      out float4 out_2 : SV_Target2,
      out float depth : SV_Depth
      ##else
      out float out_0 : SV_Target0
      ##endif
      INPUT_VFACE)
    {
      #if SET_UP_MULTIDRAW
        SET_DRAW_CALL_ID(GET_MATERIAL_OFFSET(input));
      #endif
      half alpha, coloring;
      input.normal.xyz = MUL_VFACE(input.normal.xyz);
      #ifdef NEED_ELLIPSOID_NORMAL
      input.normal.xyz =  normalize(lerp(input.normal.xyz, input.ellipsoidNormal.xyz, get_n_ellipsoid_mix()));
      #endif
      UnpackedGbuffer gbuffer = get_impostor_gbuffer(input, alpha, coloring);
      //depth = out_color.a < 0.5 ? 1. : input.posToPs.z / input.posToPs.w;

      ##if branch_mask_render == no
      float depthOut = 0.5f*input.diffuseTexcoord.z / input.diffuseTexcoord.w;
      depth = alpha < 0.5 ? depthOut : depthOut+0.5;

      out_0.a = alpha;
      out_0.rgb = gbuffer.albedo.rgb;
      //half3 encodedNormal = encodeNormal(gbuffer.normal);
      out_1.xyz = normalize(gbuffer.normal)*0.5+0.5;
      out_1.w = gbuffer.material == SHADING_FOLIAGE ? gbuffer.translucency*0.5+0.5 : coloring*0.49f;
      out_2.x = gbuffer.ao;
      out_2.y = 1-gbuffer.smoothness;
    ##if mobile_render == deferred
      out_2.z = 1.0;
    ##else
      out_2.z = gbuffer.shadow;
    ##endif
      out_2.w = 1;
      //out_2.y = gbuffer.shadowing;
      ##else
      clip(alpha - 0.5);
      if (gbuffer.material == SHADING_FOLIAGE)
        discard;
      out_0 = 0.0;
      ##endif
    }
    ##endif
  }
  compile("target_ps", "render_to_impostor_ps");
endmacro

macro RENDER_TO_IMPOSTOR_SHADOW_PS()
  if (atest == atestOn)
  {
    if (shader == rendinst_tree_colored) {
      (ps) { diffuse_tex@static = tex; }
    } else {
      (ps) { alpha_tex@static = alpha_tex; }
    }
  }

  hlsl(ps) {
    half4 rendinst_simple_impostor_shadow_ps(VsOutput input) : SV_Target
    {
      clip(input.diffuseTexcoord.w);
    ##if atest == atestOn
      #if SET_UP_MULTIDRAW
        SET_DRAW_CALL_ID(GET_MATERIAL_OFFSET(input));
      #endif
      ##if shader == rendinst_tree_colored
      float alpha = tex2DBindless(get_diffuse_tex(), input.diffuseTexcoord.xy).a;
      ##else
      float alpha = tex2DBindless(get_alpha_tex(), input.diffuseTexcoord.xy).x;
      ##endif
      clip(alpha-0.5);
    ##endif
      return float4(1 - input.diffuseTexcoord.zzz, 0.f);
    }
  }
  compile("target_ps", "rendinst_simple_impostor_shadow_ps");
endmacro


macro INIT_GROUND_ALIGN()
  hlsl(vs) {
    #define NO_GRADIENTS_IN_SHADER 1
  }
  USE_HEIGHTMAP_COMMON_VS()

  static float ground_snap_height_soft = -1;
  static float ground_snap_height_full = 0.5;
  static float ground_snap_normal_offset = 0.1;
  static float ground_snap_limit = 1.0;

  static float ground_bend_height = -1;
  static float ground_bend_normal_offset = 0.075;
  static float ground_bend_tangent_offset = 4;

  interval ground_bend_height: bendOff < 0, bendOn;
  interval ground_snap_height_soft: snapOff < 0, snapOn;

  (vs) {
    ground_snap_params@f4 = (ground_snap_height_soft, 1 / ground_snap_height_soft, ground_snap_height_full, 1 / ground_snap_height_full);
    ground_bend_params@f4 = (ground_bend_height, 1.0 / ground_bend_height, ground_bend_tangent_offset, ground_bend_normal_offset);
    ground_snap_normal_offset@f1 = (ground_snap_normal_offset);
    ground_snap_limit@f1 = (ground_snap_limit);
  }

  hlsl(vs)
  {
    float4x4 get_rotation_from_angle_axis(float angle, float3 axis)
    {
      float c, s;
      sincos(angle, s, c);

      float t = 1 - c;
      float x = axis.x;
      float y = axis.y;
      float z = axis.z;

      return float4x4(
          t * x * x + c,      t * x * y - s * z,  t * x * z + s * y, 0,
          t * x * y + s * z,  t * y * y + c,      t * y * z - s * x, 0,
          t * x * z - s * y,  t * y * z + s * x,  t * z * z + c, 0,
          0, 0, 0, 1
      );
    }


    float4x4 get_rotation_from_dir(float3 dir, float a)
    {
      float3 up = float3(0, 1, 0);
      float3 xaxis = normalize(cross(up, dir));
      float angle = acos(dot(normalize(dir), up));
      return get_rotation_from_angle_axis(-angle * a, xaxis);
    }
  }
endmacro

macro USE_GROUND_ALIGN()
  USE_RENDINST_HEIGHTMAP_OFS(vs)
  hlsl(vs)
  {
    float3 apply_ground_align(float3 worldPos, float3 localPos, float3 worldLocalPos, float4 pos_and_scale)
    {
      float2 heightmapTc = calcTcLow(worldLocalPos.xz);
      if (any(saturate(heightmapTc) != heightmapTc))
        return worldPos;

      ##if (ground_snap_height_soft == snapOn)
        const float4 heightMaskParams = get_ground_snap_params();
        const float offset = get_ground_snap_normal_offset();
        const float snapLimit = get_ground_snap_limit();
        float landscapeHeight = getHeight(worldPos.xz);
        apply_renderinst_hmap_ofs(worldPos.xz, landscapeHeight);
        landscapeHeight -= offset;
        BRANCH
        if (worldLocalPos.y - landscapeHeight < snapLimit)
        {
          BRANCH
          if (localPos.y < 0.0f)
            worldPos.y = worldPos.y - (worldLocalPos.y - landscapeHeight);
          else if (localPos.y < heightMaskParams.z)
          {
            float heightMaskLerpValue = saturate((heightMaskParams.z - localPos.y) * heightMaskParams.w);
            worldPos.y = lerp(landscapeHeight + heightMaskParams.z * pos_and_scale.w, landscapeHeight, heightMaskLerpValue);
          }
          else if (localPos.y < heightMaskParams.x)
          {
            float heightMaskLerpValue = saturate((heightMaskParams.x - localPos.y) * heightMaskParams.y);
            worldPos.y = lerp(worldLocalPos.y + heightMaskParams.x * pos_and_scale.w, landscapeHeight, heightMaskLerpValue);
          }
        }
      ##elif (ground_bend_height == bendOn)
        float4 heightMaskParams = get_ground_bend_params();
        float bendAmount = pow3(saturate((heightMaskParams.x - localPos.y) * heightMaskParams.y));
        float2 landscapeGradient = getWorldGradient(worldLocalPos);
        float3 landscapeNormal = getWorldNormal(worldLocalPos);
        float angleCos = dot(normalize(landscapeNormal), float3(0, 1, 0));
        float3 offset = normalize(float3(landscapeGradient.x, 0, landscapeGradient.y)) * heightMaskParams.z * (1 - angleCos);
        landscapeNormal = getWorldNormal(worldLocalPos + offset);
        float landscapeHeight = getHeight(worldLocalPos.xz + offset.xz);
        offset.y = landscapeHeight - worldLocalPos.y;

        float4x4 landscapeRotation = get_rotation_from_dir(landscapeNormal, pow3(bendAmount));
        float4 newlocalPos = mulPointTm(localPos, landscapeRotation) + float4(offset * pow3(bendAmount), 0);
        worldPos = newlocalPos.xyz * pos_and_scale.w + worldLocalPos - heightMaskParams.w * landscapeNormal;
      ##endif
      return worldPos;
    }
  }
endmacro