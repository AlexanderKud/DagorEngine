texture character_micro_details;

macro SETUP_CHARACTER_TWO_MICRODETAILS()
  static int micro_detail_layer1 = -1;
  static float micro_detail_layer1_v_scale = 1;
  static float micro_detail_layer1_uv_scale = 32.371;
  static int micro_detail_layer1_swap_uv = 0;
  // micro_detail_layer1_intensity should be in interval [0.0..1.0]. Value greater then 1.0 may work, but may cause glitches too.
  static float micro_detail_layer1_intensity = 1;

  static int micro_detail_layer2 = -1;
  static float micro_detail_layer2_v_scale = 1;
  static float micro_detail_layer2_uv_scale = 32.371;
  static int micro_detail_layer2_swap_uv = 0;
  // micro_detail_layer2_intensity should be in interval [0.0..1.0]. Value greater then 1.0 may work, but may cause glitches too.
  static float micro_detail_layer2_intensity = 1;
endmacro

macro SETUP_CHARACTER_MICRODETAIL()
  static int micro_detail_layer = -1;
  static float micro_detail_layer_v_scale = 1;
  static float micro_detail_layer_uv_scale = 32.371;
  static int micro_detail_layer_swap_uv = 0;
  // micro_detail_layer_intensity should be in interval [0.0..1.0]. Value greater then 1.0 may work, but may cause glitches too.
  static float micro_detail_layer_intensity = 1;
endmacro

macro INIT_USE_CHARACTER_MICRODETAIL()
  (ps) { character_micro_details@smpArray = character_micro_details; }
endmacro

macro USE_CHARACTER_MICRODETAIL_COMMON()
  USE_NORMAL_DETAIL()
  hlsl(ps) {
    void apply_character_micro_detail_intensity(float4 microDetail, inout half3 diffuseColor, inout half3 detailNormal, inout half reflectance, inout half smoothness, float intensity)
    {
      // microDetail:
      // r - diffuse multiplier
      // g - packed normal x
      // b - reflectance
      // a - packed normal y
      // all components should be in interval [0.0..1.0]

      ##if character_micro_details != NULL

      // Update microDetail vector
      // If micro_detail_layer_intensity > 1.0, this line may move out microDetail components from [0.0..1.0] interval. It will cause glitches.
      // So micro_detail_layer_intensity should be <= 1.0
      // NOTE: if in future micro_detail_layer_intensity may hav value greater then 1.0, we should add saturate(...) in the line below.
      microDetail = (microDetail - 0.5) * intensity + 0.5;

      microDetail.ag = lerp(microDetail.ag, 0.5, saturate(smoothness*5-2));//remove normal details on very smooth surface
      detailNormal = RNM_ndetail_normalized(detailNormal, unpack_ag_normal(microDetail));

      diffuseColor.rgb *= pow2(microDetail.r * 2);
      reflectance *= microDetail.b*2;
      smoothness = saturate(smoothness * microDetail.r * 2);
      ##endif
    }
  }
endmacro

macro USE_CHARACTER_MICRODETAIL()
  (ps) {
    character_micro_detail_scale@f4 = (micro_detail_layer_uv_scale, micro_detail_layer_uv_scale*micro_detail_layer_v_scale, micro_detail_layer, micro_detail_layer_swap_uv);
    character_micro_detail_intensity@f1 = (micro_detail_layer_intensity);
  }

  USE_CHARACTER_MICRODETAIL_COMMON()

  hlsl(ps) {
    #define character_micro_detail_layer (get_character_micro_detail_scale().z)

    half4 sample_character_micro_detail(float2 uv, int arrayNo)
    {
      FLATTEN
      if (get_character_micro_detail_scale().w > 0)
        uv = uv.yx;
      return tex3D(character_micro_details, float3(uv, arrayNo));
    }
    half4 get_character_micro_detail(float2 uv, half microDetailLayer)
    {
      microDetailLayer = floor(microDetailLayer*255+0.5)/36;
      half power = frac(microDetailLayer);
      half arrayNo = floor(microDetailLayer+0.5);
      if (power>0)
        arrayNo = 0;
      //float len = max(ddx(arrayNo), ddy(arrayNo));
      half4 microDetailN = sample_character_micro_detail(uv, arrayNo);
      FLATTEN
      if (microDetailLayer == 255)//special case no microdetail
        microDetailN = 0.5;
      return microDetailN;
    }

    void apply_character_micro_detail(float4 microDetail, inout half3 diffuseColor, inout half3 detailNormal, inout half reflectance, inout half smoothness)
    {
      apply_character_micro_detail_intensity(microDetail, diffuseColor, detailNormal, reflectance, smoothness, get_character_micro_detail_intensity());
    }
  }
endmacro

macro USE_CHARACTER_TWO_MICRODETAILS()
  (ps) {
    character_micro_detail_scale1@f4 = (micro_detail_layer1_uv_scale, micro_detail_layer1_uv_scale*micro_detail_layer1_v_scale, micro_detail_layer1, micro_detail_layer1_swap_uv);
    character_micro_detail_scale2@f4 = (micro_detail_layer2_uv_scale, micro_detail_layer2_uv_scale*micro_detail_layer2_v_scale, micro_detail_layer2, micro_detail_layer2_swap_uv);
    character_micro_detail_intensity@f2 = (micro_detail_layer1_intensity, micro_detail_layer2_intensity, 0, 0);
  }

  USE_CHARACTER_MICRODETAIL_COMMON()

  hlsl(ps) {
    #define character_micro_detail_layer1 (get_character_micro_detail_scale1().z)
    #define character_micro_detail_layer2 (get_character_micro_detail_scale2().z)
    half4 sample_character_micro_detail1(float2 uv, int arrayNo)
    {
      FLATTEN
      if (get_character_micro_detail_scale1().w > 0)
        uv = uv.yx;
      return tex3D(character_micro_details, float3(uv, arrayNo));
    }

    half4 sample_character_micro_detail2(float2 uv, int arrayNo)
    {
      FLATTEN
      if (get_character_micro_detail_scale2().w > 0)
        uv = uv.yx;
      return tex3D(character_micro_details, float3(uv, arrayNo));
    }

    void apply_character_micro_detail1(float4 microDetail, inout half3 diffuseColor, inout half3 detailNormal, inout half reflectance, inout half smoothness)
    {
      apply_character_micro_detail_intensity(microDetail, diffuseColor, detailNormal, reflectance, smoothness, get_character_micro_detail_intensity().x);
    }

    void apply_character_micro_detail2(float4 microDetail, inout half3 diffuseColor, inout half3 detailNormal, inout half reflectance, inout half smoothness)
    {
      apply_character_micro_detail_intensity(microDetail, diffuseColor, detailNormal, reflectance, smoothness, get_character_micro_detail_intensity().y);
    }
  }
endmacro

macro NO_SIMPLE_MICRODETAILED()
hlsl {
  #define apply_micro_detail(uv, diffuseColor, detailNormal, smoothness)
  #define apply_micro_detail_perturb(uv, diffuseColor, smoothness, worldNormal, VN, P2E)
}
endmacro

