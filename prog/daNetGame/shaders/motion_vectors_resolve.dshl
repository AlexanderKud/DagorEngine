include "shader_global.dshl"
include "viewVecVS.dshl"
include "gbuffer.dshl"
include "taa_inc.dshl"
include "reprojected_motion_vectors.dshl"

float4 prevViewProjTm0;
float4 prevViewProjTm1;
float4 prevViewProjTm2;
float4 prevViewProjTm3;

shader motion_vectors_resolve
{
  cull_mode  = none;
  z_test = false;
  z_write = false;

  USE_AND_INIT_VIEW_VEC(vs)
  POSTFX_VS_TEXCOORD_VIEWVEC(1, uv, viewVec)
  INIT_READ_DEPTH_GBUFFER()
  USE_READ_DEPTH_GBUFFER()
  INIT_ZNZFAR()
  USE_MOTION_VEC_ENCODE(ps)
  USE_READ_GBUFFER_MATERIAL_DYNAMIC()
  INIT_REPROJECTED_MOTION_VECTORS(ps)
  USE_REPROJECTED_MOTION_VECTORS(ps)
  INIT_READ_GBUFFER_MATERIAL_DYNAMIC_BASE(ps)

  (ps) {
    // prev frame viewproj matrix with current frame jitter, so motion vectors themselves are not jittered!
    prevViewProjTm@f44 = {prevViewProjTm0, prevViewProjTm1, prevViewProjTm2, prevViewProjTm3};
  }

  hlsl(ps) {
    float4 motion_vectors_resolve_ps(VsOutput i) : SV_Target0
    {
      if (!autoGenMotionVectorGbuffer(i.uv))
        discard;
      float rawDepth = readGbufferDepth(i.uv);
      if (rawDepth >= 1)
        discard;

      float depth = linearize_z(rawDepth, zn_zfar.zw);
      float3 cameraToPoint = i.viewVec * depth;
      float3 motionInUvSpace = get_reprojected_motion_vector(float3(i.uv, depth), cameraToPoint, prevViewProjTm);
      return float4(motionInUvSpace, 0);  // static objects are assumed to be not reactive
    }
  }

  compile("target_ps", "motion_vectors_resolve_ps");
}