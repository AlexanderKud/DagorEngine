// Copyright (C) Gaijin Games KFT.  All rights reserved.
#pragma once

namespace drv3d_metal
{
const char clear_vs_metal[] = ""
                              "#include <metal_stdlib>\n"
                              "using namespace metal;\n"
                              "typedef struct {\n"
                              "float2 position;\n"
                              "} Triangle;\n"
                              "struct Data{\n"
                              "  float z;\n"
                              "};\n"
                              "typedef struct {\n"
                              "float4 position [[position]];\n"
                              "} TriangleOutput;\n"
                              "vertex TriangleOutput VertexColor(const device Triangle *Vertices [[buffer(0)]],\n"
                              "                  const uint index [[vertex_id]],\n"
                              "                  constant Data& data [[buffer(" BIND_POINT_STR ")]])\n"
                              "{\n"
                              "  TriangleOutput out;\n"
                              "  out.position = float4(Vertices[index].position, data.z, 1.0);\n"
                              "  return out;\n"
                              "}";

const char clear_ps_metal_f[] = ""
                                "#include <metal_stdlib>\n"
                                "#include <metal_texture>\n"
                                "using namespace metal;\n"
                                "typedef struct {\n"
                                "float4 position [[position]];\n"
                                "} TriangleOutput;\n"
                                "struct Data{\n"
                                "  float4 color;\n"
                                "};\n"
                                "struct Output{\n"
                                "  float4 cl0 [[color(0)]];\n"
                                "  float4 cl1 [[color(1)]];\n"
                                "  float4 cl2 [[color(2)]];\n"
                                "  float4 cl3 [[color(3)]];\n"
                                "  float4 cl4 [[color(4)]];\n"
                                "  float4 cl5 [[color(5)]];\n"
                                "  float4 cl6 [[color(6)]];\n"
                                "  float4 cl7 [[color(7)]];\n"
                                "} ;\n"
                                "fragment Output texturedQuadFragment(TriangleOutput   inFrag  [[ stage_in ]],\n"
                                "                   constant Data& data [[buffer(" BIND_POINT_STR ")]])\n"
                                "{\n"
                                "  Output out = {};\n"
                                "  out.cl0 = data.color;\n"
                                "  out.cl1 = data.color;\n"
                                "  out.cl2 = data.color;\n"
                                "  out.cl3 = data.color;\n"
                                "  out.cl4 = data.color;\n"
                                "  out.cl5 = data.color;\n"
                                "  out.cl6 = data.color;\n"
                                "  out.cl7 = data.color;\n"
                                "  return out;\n"
                                "};";

const char clear_ps_metal_ui[] = ""
                                 "#include <metal_stdlib>\n"
                                 "#include <metal_texture>\n"
                                 "using namespace metal;\n"
                                 "typedef struct {\n"
                                 "float4 position [[position]];\n"
                                 "} TriangleOutput;\n"
                                 "struct Data{\n"
                                 "  uint4 color;\n"
                                 "};\n"
                                 "struct Output{\n"
                                 "  uint4 cl0 [[color(0)]];\n"
                                 "  uint4 cl1 [[color(1)]];\n"
                                 "  uint4 cl2 [[color(2)]];\n"
                                 "  uint4 cl3 [[color(3)]];\n"
                                 "  uint4 cl4 [[color(4)]];\n"
                                 "  uint4 cl5 [[color(5)]];\n"
                                 "  uint4 cl6 [[color(6)]];\n"
                                 "  uint4 cl7 [[color(7)]];\n"
                                 "} ;\n"
                                 "fragment Output texturedQuadFragment(TriangleOutput   inFrag  [[ stage_in ]],\n"
                                 "                   constant Data& data [[buffer(" BIND_POINT_STR ")]])\n"
                                 "{\n"
                                 "  Output out = {};\n"
                                 "  out.cl0 = data.color;\n"
                                 "  out.cl1 = data.color;\n"
                                 "  out.cl2 = data.color;\n"
                                 "  out.cl3 = data.color;\n"
                                 "  out.cl4 = data.color;\n"
                                 "  out.cl5 = data.color;\n"
                                 "  out.cl6 = data.color;\n"
                                 "  out.cl7 = data.color;\n"
                                 "  return out;\n"
                                 "};";

const char clear_ps_metal_i[] = ""
                                "#include <metal_stdlib>\n"
                                "#include <metal_texture>\n"
                                "using namespace metal;\n"
                                "typedef struct {\n"
                                "float4 position [[position]];\n"
                                "} TriangleOutput;\n"
                                "struct Data{\n"
                                "  int4 color;\n"
                                "};\n"
                                "struct Output{\n"
                                "  int4 cl0 [[color(0)]];\n"
                                "  int4 cl1 [[color(1)]];\n"
                                "  int4 cl2 [[color(2)]];\n"
                                "  int4 cl3 [[color(3)]];\n"
                                "  int4 cl4 [[color(4)]];\n"
                                "  int4 cl5 [[color(5)]];\n"
                                "  int4 cl6 [[color(6)]];\n"
                                "  int4 cl7 [[color(7)]];\n"
                                "} ;\n"
                                "fragment Output texturedQuadFragment(TriangleOutput   inFrag  [[ stage_in ]],\n"
                                "                   constant Data& data [[buffer(" BIND_POINT_STR ")]])\n"
                                "{\n"
                                "  Output out = {};\n"
                                "  out.cl0 = data.color;\n"
                                "  out.cl1 = data.color;\n"
                                "  out.cl2 = data.color;\n"
                                "  out.cl3 = data.color;\n"
                                "  out.cl4 = data.color;\n"
                                "  out.cl5 = data.color;\n"
                                "  out.cl6 = data.color;\n"
                                "  out.cl7 = data.color;\n"
                                "  return out;\n"
                                "};";

const char copy_vs_metal[] = ""
                             "#include <metal_stdlib>\n"
                             "using namespace metal;\n"
                             "typedef struct {\n"
                             "float2 position;\n"
                             "} Triangle;\n"
                             "struct Data{\n"
                             "  float4 src;\n"
                             "};\n"
                             "typedef struct {\n"
                             "float4 position [[position]];\n"
                             "float2 texCoord [[user(texturecoord)]];\n"
                             "} TriangleOutput;\n"
                             "vertex TriangleOutput VertexColor(const device Triangle *Vertices [[buffer(0)]],"
                             "  const uint index [[vertex_id]], constant Data& data [[buffer(" BIND_POINT_STR ")]])\n"
                             "{\n"
                             "  TriangleOutput out;\n"
                             "  out.position = float4(Vertices[index].position, 0.0, 1.0);\n"
                             "  out.texCoord = float2(data.src.x + (Vertices[index].position.x + 1.0) * 0.5 * data.src.y,"
                             "      data.src.z + (1.0 - Vertices[index].position.y) * 0.5 * data.src.w);\n"
                             "  return out;\n"
                             "}";

const char copy_ps_metal[] = ""
                             "#include <metal_stdlib>\n"
                             "#include <metal_texture>\n"
                             "using namespace metal;\n"
                             "typedef struct {\n"
                             "float4 position [[position]];\n"
                             "float2 texCoord [[user(texturecoord)]];\n"
                             "} TriangleOutput;\n"
                             "fragment float4 texturedQuadFragment(TriangleOutput   inFrag  [[ stage_in ]],\n"
                             "                  texture2d<float>  tex2D   [[ texture(0) ]],\n"
                             "                  sampler tex_sampler[[sampler(0)]])\n"
                             "{\n"
                             "  float4 color = tex2D.sample(tex_sampler, inFrag.texCoord);\n"
                             "  return color;\n"
                             "};";
} // namespace drv3d_metal
