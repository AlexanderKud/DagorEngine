actions together quietly raw_sym_link
{
  echo * make rel symlink:  $(1) <-- $(src)
  call ln -fhs "$(src)" $(1)
  if not exist $(1) set errorlevel=13
}

actions together quietly convert_png_file
{
  echo * convert PNG to: $(png)
  call $(_DEVTOOL)/mac/Platforms/iPhoneOS.platform/Developer/usr/bin/pngcrush -q $(2) $(1)
  if not exist $(1) set errorlevel=13
}

actions together quietly convert_plist_file
{
  echo * build PLIST to: $(1)
  copyfile $(2) $(1).repl
  del $(1)
  call sed -i "" $(opt) $(1).repl
  call $(PYTHON_EXE) $(Root)/prog/_jBuild/$(Platform)/merge_plist.py $(1).repl $(add_plists)
  call plutil -convert binary1 -o $(1) $(1).repl
  del $(1).repl
  if not exist $(1) set errorlevel=13
}

actions together quietly convert_strings_file
{
  echo * converting loc strings: $(1)
  mkdir $(1:D)
  call plutil -convert binary1 -o $(1) $(2)
  if not exist $(1) set errorlevel=13
}

actions together quietly make_lang_file
{
  echo * create lang:    $(lang)
  mkdir $(1:D)
  copyfile /dev/null $(1)
  if not exist $(1) set errorlevel=13
}

actions together quietly sign_package
{
  echo ------- signing package -------
  echo Signing dir '$(dir)'
  call touch -c "$(dir)"
  call xattr -rc "$(dir)"
  call codesign $(opt) "$(dir)"
}

actions together quietly convert_xib_file
{
  echo * compile XIB to: $(xib)
  call ibtool $(2) --compile $(1)
  if not exist $(1) set errorlevel=13
}

actions together quietly move_target_to_framework
{
  echo * move '$(src)' to '$(dst)'
  copyfile $(src) $(dst)
  del $(src)
  if not exist $(dst) set errorlevel=13
}

actions together quietly copy_framework
{
  echo * copy Framework to: $(dst)
  call $(PYTHON_EXE) $(Root)/prog/_jBuild/$(Platform)/copy_framework.py $(src) $(dst)
  if not exist $(dst) set errorlevel=13
}

rule ProcessEmbeddedFrameworks
{
  local srcFramework = $(1[1]) ;
  local dstFramework = $(OutDir)/Frameworks/$(srcFramework:B).framework ;

  LINKopt += -F$(srcFramework:D) -framework $(srcFramework:B) ;
  CPPopt += -F$(srcFramework:D) ;

  if $(SignTarget) { Depends $(SignTarget) : $(dstFramework) ; } else { Depends all : $(dstFramework) ; }

  Depends $(dstFramework) : $(srcFramework) ;

  src on $(dstFramework) = $(srcFramework) ;
  dst on $(dstFramework) = $(OutDir)/Frameworks/$(srcFramework:B).framework ;
  copy_framework $(dstFramework) ;

  if $(1[2]) { ProcessEmbeddedFrameworks $(1[2-]) ; }
}

rule MakeAndSignFramework
{
  local build_as_framework = $(BuildAsFramework) ;
  build_as_framework ?= no ;

  if $(build_as_framework) != no {
    local framework_out_dir = $(OutDir)/Frameworks/$(build_as_framework) ;
    FrameworkTarget = $(framework_out_dir)/$(Target) ;
    FrameworkPList  = $(framework_out_dir)/Info.plist ;

    MakeDirectory $(framework_out_dir)/Info.plist : $(framework_out_dir) ;

    local was_bundle_exe = $(BundleExe) ;
    BundleExe = $(Target) ;
    ProcessBundlePlist @$(Root)/prog/_jBuild/iOS/generic.framework.plist Frameworks/$(build_as_framework)/Info.plist ;
    BundleExe = $(was_bundle_exe) ;

    Depends $(FrameworkTarget) : $(OutDir)/$(Target) ;

    src on $(FrameworkTarget) = $(OutDir)/$(Target) ;
    dst on $(FrameworkTarget) = $(FrameworkTarget) ;
    move_target_to_framework $(FrameworkTarget) ;

    FrameworkSignTarget = $(framework_out_dir)/_CodeSignature/CodeResources ;

    Depends $(FrameworkSignTarget) : $(FrameworkTarget) $(FrameworkPList) ;
    Depends all : $(FrameworkSignTarget) ;

    if $(FrameworkSignatureOpt) {
      dir on $(FrameworkSignTarget) = $(framework_out_dir) ;
      opt on $(FrameworkSignTarget) = $(FrameworkSignatureOpt) ;
      sign_package $(FrameworkSignTarget) ;
    }
  }
}


rule SignPackageRule
{
  SignTarget = $(OutDir)/_CodeSignature/CodeResources ;

  Depends $(SignTarget) : $(OutDir)/$(Target) ;
  Depends all : $(SignTarget) ;
  if $(PlatformArch) != i386 && $(SignatureOpt) {
    dir on $(SignTarget) = $(OutDir) ;
    opt on $(SignTarget) = $(SignatureOpt) ;
    sign_package $(SignTarget) ;
  }

  MakeAndSignFramework ;
}

rule ProcessBundleCopy
{
  local src = [ LocationBasedToAbsPath $(1[1]) ] ;
  local dest = $(1[2]) ;

  MakeDirectory $(OutDir)/$(dest) : $(OutDir)/$(dest:D) ;
  if $(SignTarget) { Depends $(SignTarget) : $(OutDir)/$(dest) ; } else { Depends all : $(OutDir)/$(dest) ; }
  Depends $(OutDir)/$(dest) : $(src) ;
  file on $(OutDir)/$(dest) = $(dest) ;
  raw_copy_file $(OutDir)/$(dest) : $(src) ;

  if $(1[3]) { ProcessBundleCopy $(1[3-]) ; }
}

rule ProcessBundleSymlink
{
  local dest = $(1[1]) ;
  local rel_src = $(1[2]) ;

  MakeDirectory all : $(OutDir)/$(dest:D) ;
  Depends $(OutDir)/$(dest) : $(OutDir)/$(dest:D)/$(rel_src) ;
  NOCARE $(OutDir)/$(dest:D)/$(rel_src) ;
  Depends all : $(OutDir)/$(dest) ;
  src on $(OutDir)/$(dest) = $(rel_src) ;
  raw_sym_link $(OutDir)/$(dest) : $(OutDir)/$(dest:D)/$(rel_src) ;

  if $(1[3]) { ProcessBundleSymlink $(1[3-]) ; }
}

rule ProcessBundlePng
{
  local src = [ LocationBasedToAbsPath $(1[1]) ] ;
  local dest = $(1[2]) ;

  MakeDirectory all : $(OutDir)/$(dest:D) ;
  if $(SignTarget) { Depends $(SignTarget) : $(OutDir)/$(dest) ; }
  Depends $(OutDir)/$(dest) : $(src) ;
  png on $(OutDir)/$(dest) = $(dest) ;
  convert_png_file $(OutDir)/$(dest) : $(src) ;

  if $(1[3]) { ProcessBundlePng $(1[3-]) ; }
}

rule ProcessBundleXib
{
  local src = [ LocationBasedToAbsPath $(1[1]) ] ;
  local dest = $(1[2]) ;

  MakeDirectory all : $(OutDir)/$(dest:D) ;
  if $(SignTarget) { Depends $(SignTarget) : $(OutDir)/$(dest) ; }
  Depends $(OutDir)/$(dest) : $(src) ;
  xib on $(OutDir)/$(dest) = $(dest) ;
  convert_xib_file $(OutDir)/$(dest) : $(src) ;

  if $(1[3]) { ProcessBundleXib $(1[3-]) ; }
}

rule ProcessBundleCustomLang
{
  local src = [ LocationBasedToAbsPath $(1[1]) ] ;
  local dest = $(1[2]) ;

  MakeDirectory all : $(OutDir)/$(dest:D) ;
  if $(SignTarget) { Depends $(SignTarget) : $(OutDir)/$(dest) ; }
  Depends $(OutDir)/$(dest) : $(src) ;
  lngs on $(OutDir)/$(dest) = $(dest) ;
  convert_strings_file $(OutDir)/$(dest) : $(src) ;

  if $(1[3]) { ProcessBundleCustomLang $(1[3-]) ; }
}

rule ProcessBundlePlist
{
  local src = [ LocationBasedToAbsPath $(1[1]) ] ;
  local dest = $(1[2]) ;

  MakeDirectory all : $(OutDir)/$(dest:D) ;
  if $(SignTarget) { Depends $(SignTarget) : $(OutDir)/$(dest) ; }
  Depends $(OutDir)/$(dest) : $(src) $(3) ;
  plist on $(OutDir)/$(dest) = $(dest) ;
  local uiOrient       = $(BundleUiOrient) ;
  local devOrient      = $(BundleDevOrient) ;
  local devOrientIpad  = $(BundleDevOrientIPad) ;
  local devAddCapabilities = $(BundleDeviceCapabilities) ;
  devAddCapabilities ?= "\"\"" ;
  uiOrient      ?= UIInterfaceOrientationLandscapeLeft ;
  devOrient     ?= <string>UIInterfaceOrientationLandscapeLeft</string>\ <string>UIInterfaceOrientationLandscapeRight</string> ;
  devOrientIpad ?= <string>UIInterfaceOrientationLandscapeLeft</string>\ <string>UIInterfaceOrientationLandscapeRight</string> ;

  local dest_arch = $(PlatformArch) ;
  local dest_rapi = metal ;
  if $(PlatformArch) = i386 { dest_arch = armv7 ; }

  local executable = $(BundleExe) ;
  executable ?= $(Target:B) ;

  local shortVersion = $(BundleShortVersion) ;
  shortVersion ?= $(BundleVersion) ;

  opt on $(OutDir)/$(dest) =
    "-e "\"s|%IOS_VER%|$(iOSMinVer)|g\"
    "-e "\"s|%BUNDLE_EXE%|$(executable)|g\"
    "-e "\"s|%BUNDLE_ID%|$(BundleID)|g\"
    "-e "\"s|%BUNDLE_NAME%|$(BundleName)|g\"
    "-e "\"s|%BUNDLE_TITLE%|$(BundleTitle)|g\"
    "-e "\"s|%DEVICE_SUPP_ORIENT%|$(devOrient)|g\"
    "-e "\"s|%DEVICE_SUPP_ORIENT_IPAD%|$(devOrientIpad)|g\"
    "-e "\"s|%DEVICE_UI_ORIENT%|$(uiOrient)|g\"
    "-e "\"s|%IOS_ARCH%|$(dest_arch)|g\"
    "-e "\"s|%IOS_RENDERAPI%|$(dest_rapi)|g\"
    "-e "\"s|%BUNDLE_VERSION%|$(BundleVersion)|g\"
    "-e "\"s|%BUNDLE_SHORT_VERSION%|$(shortVersion)|g\"
    "-e "\"s|%APPLOVINSDKKEY%|$(AppLovinSDKKey)|g\"
    "-e "\"s|%ADMOBAPPIDENTIFIER%|$(AdMobAppIdentifier)|g\"
    "-e "\"s|%ADDDEVICECAPABILITIES%|$(devAddCapabilities)|g\"
  ;

  add_plists on $(OutDir)/$(dest) = $(3) ;

  ALWAYS $(OutDir)/$(dest) ;
  convert_plist_file $(OutDir)/$(dest) : $(src) ;

  if $(1[3]) { ProcessBundlePlist $(1[3-]) ; }
}

rule ProcessBundleLang
{
  for t in $(1) {
    local dest = $(OutDir)/$(t).lproj/InfoPlist.strings ;
    if $(SignTarget) { Depends $(SignTarget) : $(dest) ; }
    lang on $(dest) = $(t).lproj ;
    make_lang_file $(dest) ;
  }
}

rule CopyFrameworkResBundle
{
  for t in $(1) {
    local src = $(t).bundle ;
    local dst = $(OutDir)/$(t:D=).bundle ;
    CopyDepsRecursively $(OutDir)/$(Target) : $(src) $(dst) : ;
  }
}

rule CopySignatures
{
# do nothing
}

include $(Root)/prog/_jBuild/macOS/mkdevtools.jam ;
