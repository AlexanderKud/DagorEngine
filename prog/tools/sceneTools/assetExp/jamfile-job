Root    ?= ../../../.. ;
Location = prog/tools/sceneTools/assetExp ;
KernelLinkage ?= dynamic ;
BuildingTools  = yes ;
include $(Root)/prog/tools/tools_setup.jam ;
ConsoleExe    = yes ;

TargetType  = exe ;
Target      = tools/sceneTools/daBuild-job ;
include $(Root)/prog/tools/tools_setup_outdir_bin.jam ;

include $(Root)/prog/_jBuild/defaults.jam ;


AddIncludes =
  $(Root)/prog/tools/sharedInclude
  $(Root)/prog/engine/sharedInclude
  $(Root)/prog/engine
;

Sources =
  cmain-job.cpp
  jobPool.cpp

  loadPlugins.cpp
  texExport.cpp
  resExport.cpp
  daBuild.cpp
  assetExport.cpp
;

UseProgLibs =
  engine/startup
  engine/math
  engine/gameRes
  engine/lib3d
  engine/drv/drv3d_null
  engine/perfMon/daProfilerStub

  tools/libTools/assetMgr
  tools/libTools/assetMgrHlp
  tools/libTools/util
  tools/libTools/dtx
  3rdPartyLibs/arc/zlib-$(UseZlibVer)
  3rdPartyLibs/hash
;
if $(Platform) in linux macOS { UseProgLibs += engine/osApiWrappers/messageBox/stub ; }

CPPopt = -D_TARGET_DABUILD_STATIC ;

if $(KernelLinkage) = dynamic {
  if $(Sanitize) = address { Exit ASAN requires KernelLinkage=static ; }
  ImportProgLibs = tools/libTools/daKernel ;
  ImportsRelativeDir = . ;
} else {
  local memory_lib = memory ;
  if $(PlatformSpec) = clang && $(Sanitize) = address { memory_lib = memory/rtlStdMemory ; }

  if [ GLOB $(Root)/prog/gameLibs/vehiclePhys : * ] { DabuildUseOptionalExporters += vehiclePhys ; }
  if [ GLOB $(Root)/prog/gameLibs/gamePhys/phys/shipSections : * ] { DabuildUseOptionalExporters += shipSections ; }
  if [ GLOB $(Root)/prog/3rdPartyLibs/phys/fractureTool : * ] { DabuildUseOptionalExporters += apex ; }

  UseProgLibs =
    engine/osApiWrappers
    engine/kernel
    engine/$(memory_lib)
    engine/ioSys
    engine/baseUtil
    $(UseProgLibs)
    tools/sceneTools/assetExp/exporters
    tools/sceneTools/assetExp/refProviders
  ;
  ProjectAllowsOodle = yes ;
}

include $(Root)/prog/_jBuild/build.jam ;
