include "shader_global.dshl"
include "gbuffer.dshl"
include "psh_derivate.dshl"
include "psh_tangent.dshl"

shader testMaterial
{
  no_ablend;

  channel float3 pos = pos;
  channel float3 norm = norm;
  channel float2 tc[0] = tc[0];

  texture tex = material.texture[0];
  texture normalmap = material.texture[1];

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float2 tc:  TEXCOORD0;
      float3 norm:  NORMAL;
      float3 p2e:  TEXCOORD1;
    };
  }
  (vs)
  {
    globtm@f44 = globtm;
    world_view_pos@f3 = world_view_pos;
  }
  hlsl(vs) {
    struct VsInput
    {
      float3 pos: POSITION;
      float3 norm: NORMAL;
      float2 tc: TEXCOORD0;
    };


    VsOutput test_vs(VsInput input)
    {
      VsOutput output;
      float3 pos = input.pos;
      output.pos = mul(float4(pos, 1), globtm);
      output.p2e = world_view_pos-pos;
      output.norm = input.norm;
      output.tc  = input.tc;
      return output;
    }
  }
  USE_PIXEL_TANGENT_SPACE()
  WRITE_GBUFFER()

  (ps)
  {
    tex@static = tex;
    normalmap@static = normalmap;
  }
  hlsl(ps) {
    GBUFFER_OUTPUT test_ps(VsOutput input HW_USE_SCREEN_POS)
    {
      float4 screenpos = GET_SCREEN_POS(input.pos);
      UnpackedGbuffer result;
      init_gbuffer(result);
      half4 albedo_roughness = tex2DBindless(get_tex(), input.tc);
      half4 normal_roughness = tex2DBindless(get_normalmap(), input.tc);
      float3 normal;
      normal.xy = (normal_roughness.ag*2-1);
      normal.z = sqrt(saturate(1-dot(normal.xy, normal.xy)));
      //init_albedo_roughness(result, albedo_roughness);
      init_albedo(result, albedo_roughness.xyz);
      init_smoothness(result, normal_roughness.r);
      init_normal(result, perturb_normal( normal, normalize(input.norm), input.p2e, input.tc));
      //init_normal(result, normalize(input.norm));
      init_metalness(result, 0);
      init_ao(result, 1);
      return encode_gbuffer(result, input.pointToEye, screenpos);
    }
  }
  compile("target_vs", "test_vs");
  compile("target_ps", "test_ps");
}
