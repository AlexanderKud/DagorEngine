include "shader_global.dshl"
include "gbuffer.dshl"
include "psh_derivate.dshl"
include "psh_tangent.dshl"

int plane = 0;
interval plane:isSphere<1, isPlane;

float4 sphere_color=(.5,.5,.5,0);

shader sphereMaterial
{
  no_ablend;

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float2 metallness_roghness:  TEXCOORD0;
      float3 worldPos:  TEXCOORD1;
      float3 norm:  TEXCOORD2;
    };
  }

  (vs)
  {
    globtm@f44 = globtm;
    world_view_pos@f3 = world_view_pos;
    time@f1= (time_phase(13,0),0,0,0);
  }

  hlsl(vs) {
    #include "spheres_vertices.hlsl"
    VsOutput test_vs(uint id : SV_InstanceID, uint vertId : SV_VertexID)
    {
      VsOutput output;
      ##if plane == isSphere
      float3 totalOfs = float3(4,0,0);
      float2 met_roughness = float2(id/10, id%10);
      totalOfs.xz += met_roughness;
      //totalOfs.y += 0.5+0.5*sin(time*2*PI+id*0.4);
      met_roughness*=float2(1./3, 1./9);
      float3 inputPos = get_sphere_vertex_pos(vertId);
      float3 pos = inputPos*0.5f + totalOfs;
      float3 normal = inputPos;
      ##else
      float3 color = float3(0,0,0);
      float2 planeVertex[6] = {float2(-1, -1), float2(-1, +1), float2(+1, -1), float2(+1, -1), float2(-1, +1), float2(+1, +1)};
      float3 inputPos = float3(planeVertex[min(vertId, 5)], 0).xzy;
      float3 pos = inputPos*350;
      pos.y = -1;
      float3 normal = float3(0,1,0);
      float2 met_roughness = 0;
      ##endif

      output.pos = mul(float4(pos, 1), globtm);
      output.worldPos = pos;
      output.norm = normal;
      output.metallness_roghness = met_roughness;
      return output;
    }
  }

  WRITE_GBUFFER()

  (ps)
  {
    sphere_color@f3 = (sRGBread(sphere_color));
  }

  hlsl(ps) {
    float2 rand2(float2 co)
    {
      return frac(sin(co.xy*12.9898) * 43758.5453);
    }
    GBUFFER_OUTPUT test_ps(VsOutput input HW_USE_SCREEN_POS)
    {
      float4 screenpos = GET_SCREEN_POS(input.pos);
      UnpackedGbuffer result;
      init_gbuffer(result);
      ##if plane == isSphere
      float3 normal = normalize(input.norm);// + float3(0.005*(2*rand2(floor(input.worldPos.xz*2111)/2111)-1),0) );
      float2 metallness_roghness = input.metallness_roghness;
      float3 color = sphere_color;
      init_dynamic(result, true);
      ##else
      //clip(-1);
      float3 pos = input.worldPos;
      float2 tileNo = floor(pos.xz);
      float2 tile = (pos.xz - tileNo)*2-float2(1,1);
      float2 tileCentered = pow(abs(sin(tile*PI/2)), 48);
      //float2 tileCentered = pow(tile, 6);
      float pattern = 0.5*(tileCentered.x + tileCentered.y);
      //float pattern = max(saturate(sin(pos.x*3)),saturate(sin(pos.z*3)));
      float roughness = pattern;
      float metallness  = 1-pow(roughness,8);
      //metallness = metallness* pow(max(frac(pos.x*0.25), frac(pos.z*0.25)), 8);
      //metallness = ((int(tileNo.x/4) * int(tileNo.y/2)) % 2) ? metallness : 0;
      metallness = frac(tileNo.x*tileNo.y/16* 2) * metallness;
      metallness = floor(metallness*3+0.5)/3.0;
      float2 metallness_roghness = float2(metallness, roughness);
      //metallness_roghness = float2(1,0);
      float3 color = pow(lerp(float3(0.7,0.7,0.7), float3(0.5,0.4,0.3), pow(roughness,2)), 2.2);
      //float3 normal = normalize(float3(tileCentered.x-0.5,1,tileCentered.y-0.5));
      float2 grad = (pow(abs(sin(tile*PI/2)),46)*sin(tile*PI/2))*cos(tile*PI/2);
      float3 normal = normalize(float3(grad.x,0.25,grad.y));
      ##endif
      init_albedo(result, color);
      init_smoothness(result, 1-metallness_roghness.y);
      init_normal(result, normal);
      init_metalness(result, metallness_roghness.x);
      init_ao(result, 1);
      return encode_gbuffer(result, input.pointToEye, screenpos);
    }
  }
  compile("target_vs", "test_vs");
  compile("target_ps", "test_ps");
}

shader cornellBox
{
  dont_render;//ogl support
  no_ablend;

  channel float3 pos = pos;

  cull_mode = none;


  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float3 p2e:  TEXCOORD1;
      float3 norm:  TEXCOORD2;
      float3 color:  TEXCOORD3;
    };
  }

  (vs)
  {
    globtm@f44 = globtm;
    world_view_pos@f3 = world_view_pos;
  }

  hlsl(vs) {
    VsOutput test_vs(uint id : SV_VertexID)
    {
      VsOutput output;
      float3 vertices[6][4] =
      {
        {
          float3(-1,-1,-1),
          float3(-1,+1,-1),
          float3(-1,-1,+1),
          float3(-1,+1,+1)
        },
        {
          float3(+1,-1,-1),
          float3(+1,+1,-1),
          float3(+1,-1,+1),
          float3(+1,+1,+1)
        },
        {
          float3(-1,-1,-1),
          float3(+1,-1,-1),
          float3(-1,-1,+1),
          float3(+1,-1,+1)
        },
        {
          float3(-1,+1,-1),
          float3(+1,+1,-1),
          float3(-1,+1,+1),
          float3(+1,+1,+1)
        },
        {
          float3(-1,-1,-1),
          float3(+1,-1,-1),
          float3(-1,+1,-1),
          float3(+1,+1,-1)
        },               
        {                
          float3(-1,-1,+1),
          float3(+1,-1,+1),
          float3(-1,+1,+1),
          float3(+1,+1,+1)
        },
      };
      float3 normals[6] =
      {
        float3(+1,0,0),
        float3(-1,0,0),
        float3(0,+1,0),
        float3(0,-1,0),
        float3(0,0,+1),
        float3(0,0,-1)
      };
      int faceId = id/6;
      int indices[6] = { 0,1,2,2,1,3 };
      float3 pos = vertices[faceId][indices[id%6]]*1.5;
      pos+=float3(0,1.5,0);
      float3 normal = normals[faceId];

      output.pos = mul(float4(pos, 1), globtm);
      output.color = faceId == 0 ? float3(1,0,0) : faceId == 1 ? float3(0,1,0) : float3(1,1,1);
      output.p2e = world_view_pos-pos;
      output.norm = normal;
      return output;
    }
  }

  WRITE_GBUFFER()
  hlsl(ps) {
    GBUFFER_OUTPUT test_ps(VsOutput input HW_USE_SCREEN_POS INPUT_VFACE)
    {
      float4 screenpos = GET_SCREEN_POS(input.pos);
      clip(-1);
      UnpackedGbuffer result;
      init_gbuffer(result);
      init_albedo(result, input.color);
      init_smoothness(result, 0);
      float3 normal = input.norm;
      normal = dot(normal, input.p2e) < 0 ? -normal : normal;
      init_normal(result, normal);
      init_metalness(result, 0);
      init_ao(result, 1);
      return encode_gbuffer(result, input.pointToEye, screenpos);
    }
  }
  compile("target_vs", "test_vs");
  compile("target_ps", "test_ps");
}

