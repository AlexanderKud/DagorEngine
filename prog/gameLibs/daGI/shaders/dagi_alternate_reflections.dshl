include "frustum.dshl"
include "dagi_reflections.dshl"

macro DAGI_ALTERNATE_REFLECTIONS(code)
  if (gi_quality >= colored)
  {
    (code) {
      frustumPlane03X@f4 = frustumPlane03X;
      frustumPlane03Y@f4 = frustumPlane03Y;
      frustumPlane03Z@f4 = frustumPlane03Z;
      frustumPlane03W@f4 = frustumPlane03W;
    }
    GET_REFLECTIONS_GI(code)
    hlsl(code) {
      #include <interleavedGradientNoise.hlsl>
      //use simple MAD Feistel
      //0..65535 in 3 components
      uint3 rand3D_PCG_Feistel_16(uint3 v)
      {
        // Linear congruential step.
        v = v * 1664525u + 1013904223u;
        v.x += v.y*v.z;
        v.y += v.z*v.x;
        v.z += v.x*v.y;
        v.x += v.y*v.z;
        v.y += v.z*v.x;
        v.z += v.x*v.y;
        return v >> 16u;
      }
      float intersectFrustum(float3 origin, float3 rayDir)
      {
        float4 nominator = frustumPlane03X*origin.x+frustumPlane03Y*origin.y+frustumPlane03Z*origin.z + frustumPlane03W;
        float4 denom = frustumPlane03X*rayDir.x+frustumPlane03Y*rayDir.y+frustumPlane03Z*rayDir.z;
        float4 intersection = -nominator / denom;
        intersection = intersection < 0 ? 0 : intersection;
        return min(min(intersection.x, intersection.y), min(intersection.z, intersection.w));
      }

      half4 get_gi_dithered_reflections(uint2 pixelPos, float3 rayDir, float3 cameraToPoint, float3 normal)
      {
        uint frameRandom = uint(SSRParams.z);
        float3 wdir = rayDir;
        float3 origin = cameraToPoint+world_view_pos.xyz;
        float startAt = max(0, 0.85*intersectFrustum(origin, wdir) + interleavedGradientNoiseFramed(pixelPos.xy, uint(SSRParams.z))*0.5 - 0.25);
        float3 wposOfs = origin + startAt*wdir;
        #if !SSR_CONE_SAMPLING//if we use sampling we actually get better results, than with randomizing
          uint3 random = rand3D_PCG_Feistel_16(uint3(pixelPos, uint(SSRParams.w)));//
          float3 randomF = random*(2./65535.0)-1.f;
          wposOfs += saturate(length(cameraToPoint))*0.2*randomF.zxy;
          wdir += (randomF * 0.005);//randomize direction a bit?
        #endif
        return get_gi_reflection(wposOfs, wdir, normal, startAt);
      }

      void dagi_alternate_reflections(inout half4 newTarget, uint2 pixelPos, float3 rayDir, float3 cameraToPoint, float3 normal, bool hit, bool hit_not_zfar)
      {
        if (!hit)
        {
          newTarget = get_gi_dithered_reflections(pixelPos, rayDir, cameraToPoint, normal);
          newTarget.rgb /= (newTarget.a+1e-6);
        } else if (hit_not_zfar)//remove vignette
          newTarget.a = 1;
      }
    }
  } else
  {
    hlsl(code) {
      void dagi_alternate_reflections(inout half4 newTarget, uint2 pixelPos, float3 rayDir, float3 cameraToPoint, float3 normal, bool hit, bool hit_not_zfar){}
    }
  }

endmacro
