include "shore.dshl"

int water_vs_cascades = 5;
interval water_vs_cascades : zero<1, one <2, two<3, three<4, four<5, five;

int water_cascades = 5;
interval water_cascades : two<3, three<4, four<5, five<6, one_to_four;

texture water_gradients_tex0;
texture water_gradients_tex1;
texture water_gradients_tex2;
texture water_gradients_tex3;
float4 cascadesTexelScale0123;
float4 cascadesTexelScale4567;
float4 UVScaleCascade0123=(1,1,1,1);
float4 UVScaleCascade4567=(1,1,1,1);
float4 foam_hats_scale = (4.0, 0.75, 0.3, 0);
//x - mul
//y - threshold
//z - folding

float4 water_cascades_roughness0123 = (0, 0, 0, 0);
float4 water_cascades_roughness4567 = (0, 0, 0, 0);
float water_cascades_dist_mul = 1.0 / 7.0;
float water_roughness_base = 0.0;
float4 water_cascades_lod_resolution0123 = float4(0, 0, 0, 0);
float4 water_cascades_lod_resolution4567 = float4(0, 0, 0, 0);

float4 details_weight = (50, 200, 5000, 6000);

texture water_displacement_texture0;
texture water_displacement_texture1;
texture water_displacement_texture2;
texture water_displacement_texture3;

float4 water_origin = (0, 0, 0, 0);
float4 water_vertical_lod = (0,0,0,0);
//x=0..1 - lod morph
//y=0..1 - ex lod0 morph
//z=0..n - last lod no
//w=0..n - last lod area

float4 water_grad_mul_to_four = (1, 0.13, 0.021, 0.0051);
float4 water_fold_mul_to_four = (1, 0.65, 0.44, 0.44);

float4 perlin_cascade_factors1 = (1, 1, 1, 1);
float4 perlin_cascade_factors2 = (1, 1, 1, 1);

hlsl {
  #define NO_GEOMORPHLODS 0
  #define FULL_GEOMORPH_LODS 1
  #define VERTICAL_GEOMORPHLODS 2
}

macro INIT_WATER_WORLD_POS()
  (vs) {
    water_origin_xz@f2 = (water_origin.x, water_origin.z, 0, 0);
    water_vertical_lod@f4 = water_vertical_lod;
  }
endmacro

macro GET_WATER_WORLD_POS()
  hlsl(vs) {
    #ifndef WATER_GEOMORPHING
      #define WATER_GEOMORPHING NO_GEOMORPHLODS//FULL_GEOMORPH_LODS//VERTICAL_GEOMORPHLODS
    #endif

    #define LAST_LOD_BORDER 5.0
    #define LAST_LOD_BORDER_FADE 2

    void get_per_instance_constant(out float4 decConst input_used_instance_id)
    {
      decConst = heightmap_scale_offset[instance_id.x];
    }

    float2 getWorldPosBlendOffset(float cellSize, int2 inPos, float blendFactor, float2 isBorder)
    {
      return cellSize * blendFactor * (((inPos.xy / 2) % 2) * 2 - 1) * (inPos % 2) * (1 - isBorder);
    }

    float2 getWorldPosXZ(int2 inPos, out float dist_fade, out bool useHeightmap input_used_instance_id)
    {
      float4 decConst; get_per_instance_constant(decConst used_instance_id);
      float lod0CellSize = oneCellSize;
      float cellSize = decConst.x;
      float2 patchPos = decConst.zw;
      const float tessFactor = 2.0;

      int4 border = decode_edge_tesselation(decConst.y); // For each direction stores tessFactor if patch has border with the next lod and 1 otherwise.

      float2 theborder = float2(inPos.y == 0 ? border.z : (inPos.y == patchDim ? border.w : 1),
                                inPos.x == 0 ? border.x : (inPos.x == patchDim ? border.y : 1));

      int2 inPosAligned;
    #if WATER_GEOMORPHING == FULL_GEOMORPH_LODS
      float tessQuadSize = cellSize * tessFactor * 2.0;
      float2 alignedPatchPos = floor(patchPos / tessQuadSize) * tessQuadSize;
      int2 inPosShift = int2((patchPos - alignedPatchPos) / cellSize);
      inPosAligned = inPos + inPosShift;
      decConst.zw = alignedPatchPos;
      float vertexTessFactor = max(theborder.x, theborder.y);
      inPosAligned.y = adapt_edge_tesselation(inPosAligned.y, vertexTessFactor);
      inPosAligned.x = adapt_edge_tesselation(inPosAligned.x, vertexTessFactor);
    #else
      inPosAligned.y = adapt_edge_tesselation(inPos.y, theborder.y);
      inPosAligned.x = adapt_edge_tesselation(inPos.x, theborder.x);
    #endif

      float2 worldPos = decodeWorldPosXZConst(decConst, inPosAligned);

      int lodNo = int(log2(cellSize / lod0CellSize));
      int lastLodNo = int(water_vertical_lod.z);

    #if WATER_GEOMORPHING != NO_GEOMORPHLODS
      float verticalBlendFactor = cellSize == lod0CellSize ? water_vertical_lod.x : 0;
      float2 isBorder = saturate(theborder - 1);
    #endif

    #if WATER_GEOMORPHING == FULL_GEOMORPH_LODS
      float2 distToOriginXZ = abs(worldPos - water_origin_xz); // Dist to camera acutally if the origin isn't customized.
      float distToOrigin = max(distToOriginXZ.x, distToOriginXZ.y);

      float lod0PatchSize = patchDim * lod0CellSize;
      float patchSize = patchDim * cellSize;

      float stepSizeInner = max(cellSize, lod0PatchSize);
      float stepSizeOuter = max(cellSize * tessFactor, lod0PatchSize);

      // We shift clipmap by size of lod0 patch, so in order to have smooth tesselation in lod0 we should start blending closer.
      float lodsBlendStartDist = patchSize + (lodNo > 0 ? stepSizeInner * 0.5 : 0.0);
      float lodsBlendEndDist = patchSize * 2.0 - stepSizeOuter * 0.5 - (lodNo == lastLodNo ? LAST_LOD_BORDER * cellSize : 0.0);

      float horizonralBlendFactor = saturate((distToOrigin - lodsBlendStartDist) / (lodsBlendEndDist - lodsBlendStartDist));

      worldPos += getWorldPosBlendOffset(cellSize, inPosAligned, max(verticalBlendFactor, horizonralBlendFactor), isBorder);
    #elif WATER_GEOMORPHING == VERTICAL_GEOMORPHLODS
      worldPos += getWorldPosBlendOffset(cellSize, inPosAligned, verticalBlendFactor, isBorder);
    #endif

      dist_fade = 1;
      useHeightmap = true;
      if (lodNo == lastLodNo)
      {
        float2 posFromEdge = float2(border.x != 1 ? inPos.x : (border.y != 1 ? patchDim - inPos.x : patchDim),
                                    border.z != 1 ? inPos.y : (border.w != 1 ? patchDim - inPos.y : patchDim));
        worldPos.xy += water_vertical_lod.w * saturate(1.0 - posFromEdge / LAST_LOD_BORDER) * float2(border.x != 1 ? -1.0 : 1.0, border.z != 1 ? -1.0 : 1.0);
      #if WATER_GEOMORPHING == FULL_GEOMORPH_LODS
        dist_fade = saturate((lodsBlendEndDist - cellSize - distToOrigin) / (LAST_LOD_BORDER_FADE * cellSize));
      #else
        dist_fade = saturate((min(posFromEdge.x, posFromEdge.y) - LAST_LOD_BORDER) / LAST_LOD_BORDER_FADE);
      #endif
        useHeightmap = border.x != 1 && border.y != 1 && border.z != 1 && border.w != 1;
      }

      return worldPos;
    }
  }
endmacro

macro USE_WATER_COMMON(stage)
  (stage) {
    UVScaleCascade0123@f4 = UVScaleCascade0123;
    cascadePixelSize@f1 = (UVScaleCascade0123.x * cascadesTexelScale0123.x, 0, 0, 0);
  }
  if (water_cascades == five)
  {
    (stage) { UVScaleCascade4567@f4 = UVScaleCascade4567; }
  }

  hlsl(stage) {
    // WaveWorks related functions
    void get_cascades(float2 worldPosXZ, out float4 nvsf_tex_coord_cascade01, out float4 nvsf_tex_coord_cascade23, out float4 nvsf_tex_coord_cascade45)
    {
      // UVs
      nvsf_tex_coord_cascade01 = worldPosXZ.xyxy * UVScaleCascade0123.xxyy;
      nvsf_tex_coord_cascade23 = worldPosXZ.xyxy * UVScaleCascade0123.zzww;
      ##if water_cascades == five
        nvsf_tex_coord_cascade45 = worldPosXZ.xyxy * UVScaleCascade4567.xxyy;
      ##else
        nvsf_tex_coord_cascade45 = float4(0.0, 0.0, 0.0, 0.0);
      ##endif
      // Add a half of the texture pixel size to remove the shift coming otherwise from the pixel centered
      // bilinear filtration for different fft resolutions (addresses issues of the convergence)
      nvsf_tex_coord_cascade01 += 0.5 * cascadePixelSize;
      nvsf_tex_coord_cascade23 += 0.5 * cascadePixelSize;
      nvsf_tex_coord_cascade45 += 0.5 * cascadePixelSize;
    }
  }
endmacro

macro USE_WATER_DISPLACEMENT(stage, surf)
  USE_WATER_COMMON(stage)
  INIT_SHORE(stage)
  USE_SHORE(stage, 0, surf)

  (stage) { displacement0@smpArray = water_displacement_texture0; }

  hlsl(stage) {
    void WaveWorks_GetDisplacedVertex(float3 worldPos, float worldPosDistance, float4 blend_factors0123, float4 blend_factors4567,
      out float3 nvsf_displacement, out float4 nvsf_tex_coord_cascade01, out float4 nvsf_tex_coord_cascade23, out float4 nvsf_tex_coord_cascade45)
    {
      float4 nvsf_blendfactors0123 = 1;
      float4 nvsf_blendfactors4567 = 1;
      get_cascades(worldPos.xy, nvsf_tex_coord_cascade01, nvsf_tex_coord_cascade23, nvsf_tex_coord_cascade45);
      nvsf_blendfactors0123 *= blend_factors0123;
      nvsf_blendfactors4567 *= blend_factors4567;

      // Displacement map
      ##if water_vs_cascades == zero
      nvsf_displacement = 0;//==fixme optimize more
      ##else
        ##if (support_texture_array == on)
          nvsf_displacement = nvsf_blendfactors0123.x * tex3Dlod(displacement0, float4(nvsf_tex_coord_cascade01.yx, 0, 0)).xyz;
          ##if water_vs_cascades != one
            nvsf_displacement += nvsf_blendfactors0123.y==0? float3(0,0,0) : nvsf_blendfactors0123.y * tex3Dlod(displacement0, float4(nvsf_tex_coord_cascade01.wz,1, 0)).xyz;
            ##if water_vs_cascades != two
              nvsf_displacement += nvsf_blendfactors0123.z==0? float3(0,0,0) : nvsf_blendfactors0123.z * tex3Dlod(displacement0, float4(nvsf_tex_coord_cascade23.yx,2, 0)).xyz;
              ##if water_vs_cascades != three
                nvsf_displacement += nvsf_blendfactors0123.w==0? float3(0,0,0) : nvsf_blendfactors0123.w * tex3Dlod(displacement0, float4(nvsf_tex_coord_cascade23.wz,3, 0)).xyz;
                ##if water_vs_cascades != four
                  nvsf_displacement += nvsf_blendfactors4567.x==0? float3(0,0,0) : nvsf_blendfactors4567.x * tex3Dlod(displacement0, float4(nvsf_tex_coord_cascade45.yx,4, 0)).xyz;
                ##endif
              ##endif
            ##endif
          ##endif
        ##else
          nvsf_displacement = nvsf_blendfactors0123.x * tex2Dlod(displacement0, float4(nvsf_tex_coord_cascade01.yx,0, 0)).xyz;
          ##if water_vs_cascades != one
            nvsf_displacement += nvsf_blendfactors0123.y==0? float3(0,0,0) : nvsf_blendfactors0123.y * tex2Dlod(displacement1, float4(nvsf_tex_coord_cascade01.wz,0, 0)).xyz;
            ##if water_vs_cascades != two
              nvsf_displacement += nvsf_blendfactors0123.z==0? float3(0,0,0) : nvsf_blendfactors0123.z * tex2Dlod(displacement2, float4(nvsf_tex_coord_cascade23.yx,0, 0)).xyz;
              ##if water_vs_cascades != three
                nvsf_displacement += nvsf_blendfactors0123.w==0? float3(0,0,0) : nvsf_blendfactors0123.w * tex2Dlod(displacement3, float4(nvsf_tex_coord_cascade23.wz,0, 0)).xyz;
                ##if water_vs_cascades != four
                  nvsf_displacement += nvsf_blendfactors4567.x==0? float3(0,0,0) : nvsf_blendfactors4567.x * tex2Dlod(displacement4, float4(nvsf_tex_coord_cascade45.yx,0, 0)).xyz;
                ##endif
              ##endif
            ##endif
          ##endif
        ##endif
      ##endif
    }

    float3 getWaterDisplacementWithShoreData(float3 world_pos, float view_dist, out float4 tex_coord_cascade01, out float4 tex_coord_cascade23, out float4 tex_coord_cascade45, ShoreData shore_data)
    {
      float3 displacement = float3(0, 0, 0);
##if compatibility_mode == compatibility_mode_off
      BRANCH
      if (shore_data.landHeight < ftime_cscale_hmap.z * 0.03125) //1/32
##endif
      {
        WaveWorks_GetDisplacedVertex(world_pos, view_dist, float4(shore_data.oceanWavesMultiplier.xx, shore_data.oceanDetailsMultiplier.xx),
                        shore_data.oceanDetailsMultiplier.xxxx, displacement, tex_coord_cascade01, tex_coord_cascade23, tex_coord_cascade45);
      }
##if compatibility_mode == compatibility_mode_off
      else
      {
        float4 nvsf_blendfactors0123 = 1;
        float4 nvsf_blendfactors4567 = 1;
        get_cascades(world_pos.xy, tex_coord_cascade01, tex_coord_cascade23, tex_coord_cascade45);
      }
##endif

      return shore_data.shoreWavesDisplacement + displacement;
    }

    float3 getWaterDisplacement(float3 world_pos, float view_dist, out float4 tex_coord_cascade01, out float4 tex_coord_cascade23, out float4 tex_coord_cascade45)
    {
      ShoreData shoreData;
      getShoreAttributes(world_pos.xzy, shoreData);

      return getWaterDisplacementWithShoreData(world_pos, view_dist, tex_coord_cascade01, tex_coord_cascade23, tex_coord_cascade45, shoreData);
    }
  }
endmacro

macro INIT_WATER_GRADIENTS(stage)
  (stage) {
    water_gradients_tex0@smpArray = water_gradients_tex0;
    cascadesTexelScale0123@f4 = cascadesTexelScale0123;
    cascadesTexelScale4567@f4 = cascadesTexelScale4567;
    foam_hats_scale@f4 = foam_hats_scale;
    details_weight@f4 = (1.0 / (details_weight.y - details_weight.x), -details_weight.x / (details_weight.y - details_weight.x), 1.0 / (details_weight.w - details_weight.z), -details_weight.z / (details_weight.w - details_weight.z));
    water_grad_mul_to_four@f4 = water_grad_mul_to_four;
    water_fold_mul_to_four@f4 = water_fold_mul_to_four;
    perlin_cascade_factors1@f4 = perlin_cascade_factors1;
    perlin_cascade_factors2@f4 = perlin_cascade_factors2;
  }
endmacro

macro USE_WATER_GRADIENTS(stage, surf)
  USE_WATER_COMMON(stage)
  INIT_SHORE(stage)
  USE_SHORE(stage, 1, surf)

  hlsl(stage) {
    #ifndef NORMALIZE_FFTWATER_NORMAL
      #define NORMALIZE_FFTWATER_NORMAL 1
    #endif

    ##if (water_cascades == five)
      #define get_gradients(tc01, tc23, tc45, cbf0123, cbf4567, nrmf, ote, ofs, onrm, ofwh) get_gradients_int(tc01, tc23, tc45, cbf0123, cbf4567, nrmf, ote, ofs, onrm, ofwh)
      void get_gradients_int(float4 nvsf_tex_coord_cascade01,  float4 nvsf_tex_coord_cascade23,  float4 nvsf_tex_coord_cascade45,
        float4 nvsf_blend_factor_cascade0123, float4 nvsf_blend_factor_cascade4567, float fadeNormal,
        out float nvsf_foam_turbulent_energy, out float nvsf_foam_surface_folding, out float3 nvsf_normal, out float nvsf_foam_wave_hats)
    ##elif water_cascades != two
      #define get_gradients(tc01, tc23, tc45, cbf0123, cbf4567, nrmf, ote, ofs, onrm, ofwh) get_gradients_int(tc01, tc23, cbf0123, nrmf, ote, ofs, onrm, ofwh)
      void get_gradients_int(float4 nvsf_tex_coord_cascade01, float4 nvsf_tex_coord_cascade23, float4 nvsf_blend_factor_cascade0123, float fadeNormal,
        out float nvsf_foam_turbulent_energy, out float nvsf_foam_surface_folding, out float3 nvsf_normal, out float nvsf_foam_wave_hats)
    ##else
      #define get_gradients(tc01, tc23, tc45, cbf0123, cbf4567, nrmf, ote, ofs, onrm, ofwh) get_gradients_int(tc01, cbf0123.xy, nrmf, ote, ofs, onrm, ofwh)
      void get_gradients_int(float4 nvsf_tex_coord_cascade01, float2 nvsf_blend_factor_cascade0123, float fadeNormal,
        out float nvsf_foam_turbulent_energy, out float nvsf_foam_surface_folding, out float3 nvsf_normal, out float nvsf_foam_wave_hats)
    ##endif
    {
      float4 nvsf_grad_fold0;
      float4 nvsf_grad_fold1;
      float4 nvsf_grad_fold2;
      float4 nvsf_grad_fold3;
      float4 nvsf_grad_fold4;

      ##if water_cascades == one_to_four
        nvsf_grad_fold0 = tex3D(water_gradients_tex0, float3(nvsf_tex_coord_cascade01.xy, 0));
        nvsf_grad_fold1 = tex3D(water_gradients_tex0, float3(nvsf_tex_coord_cascade01.zw, 0));
        nvsf_grad_fold2 = tex3D(water_gradients_tex0, float3(nvsf_tex_coord_cascade23.xy, 0));
        nvsf_grad_fold3 = tex3D(water_gradients_tex0, float3(nvsf_tex_coord_cascade23.zw, 0));
        nvsf_grad_fold1.xy *= water_grad_mul_to_four.y;
        nvsf_grad_fold2.xy *= water_grad_mul_to_four.z;
        nvsf_grad_fold3.xy *= water_grad_mul_to_four.w;
        nvsf_grad_fold1.z = (nvsf_grad_fold1.z - 1) * water_fold_mul_to_four.y + 1;
        nvsf_grad_fold2.z = (nvsf_grad_fold2.z - 1) * water_fold_mul_to_four.z + 1;
        nvsf_grad_fold3.z = (nvsf_grad_fold3.z - 1) * water_fold_mul_to_four.w + 1;
      ##elif support_texture_array == on
        nvsf_grad_fold0 = tex3D(water_gradients_tex0, float3(nvsf_tex_coord_cascade01.xy,0));
        nvsf_grad_fold1 = tex3D(water_gradients_tex0, float3(nvsf_tex_coord_cascade01.zw,1));
        ##if water_cascades != two
          nvsf_grad_fold2 = tex3D(water_gradients_tex0, float3(nvsf_tex_coord_cascade23.xy,2));
          ##if water_cascades != three
            nvsf_grad_fold3 = tex3D(water_gradients_tex0, float3(nvsf_tex_coord_cascade23.zw,3));
            ##if water_cascades != four
              nvsf_grad_fold4 = tex3D(water_gradients_tex0, float3(nvsf_tex_coord_cascade45.xy,4));
            ##endif
          ##endif
        ##endif
      ##else
        nvsf_grad_fold0 = tex2D(water_gradients_tex0, nvsf_tex_coord_cascade01.xy);
        nvsf_grad_fold1 = tex2D(water_gradients_tex1, nvsf_tex_coord_cascade01.zw);
        ##if water_cascades != two
          nvsf_grad_fold2 = tex2D(water_gradients_tex2, nvsf_tex_coord_cascade23.xy);
          ##if water_cascades != three
            nvsf_grad_fold3 = tex2D(water_gradients_tex3, nvsf_tex_coord_cascade23.zw);
            ##if water_cascades != four
              nvsf_grad_fold4 = tex2D(water_gradients_tex4, nvsf_tex_coord_cascade45.xy);
            ##endif
          ##endif
        ##endif
      ##endif

      float2 nvsf_grad;
      nvsf_grad.xy = nvsf_grad_fold0.xy*nvsf_blend_factor_cascade0123.x*fadeNormal +
                     nvsf_grad_fold1.xy*nvsf_blend_factor_cascade0123.y*cascadesTexelScale0123.y*(fadeNormal*0.8+0.2);
      ##if water_cascades != two
        nvsf_grad.xy += nvsf_grad_fold2.xy*nvsf_blend_factor_cascade0123.z*cascadesTexelScale0123.z*(fadeNormal*0.7+0.3);
        ##if water_cascades != three
          nvsf_grad.xy += nvsf_grad_fold3.xy*nvsf_blend_factor_cascade0123.w*cascadesTexelScale0123.w*(fadeNormal*0.6+0.4);
          ##if water_cascades != four && water_cascades != one_to_four
            nvsf_grad.xy += nvsf_grad_fold4.xy*nvsf_blend_factor_cascade4567.x*cascadesTexelScale4567.x*(fadeNormal*0.5+0.5);
          ##endif
        ##endif
      ##endif

      float nvsf_c2c_scale = 0.25; // larger cascaded cover larger areas, so foamed texels cover larger area, thus, foam intensity on these needs to be scaled down for uniform foam look

      nvsf_foam_turbulent_energy =
      // accumulated foam energy with blendfactors
        100.0*nvsf_grad_fold0.w *
        nvsf_grad_fold1.w;
        //lerp(nvsf_c2c_scale, nvsf_grad_fold1.w, nvsf_blend_factor_cascade0123.y);
      ##if water_cascades != two
        nvsf_foam_turbulent_energy *= nvsf_grad_fold2.w;
        ##if water_cascades != three
          nvsf_foam_turbulent_energy *= nvsf_grad_fold3.w;
          ##if water_cascades != four && water_cascades != one_to_four
            nvsf_foam_turbulent_energy *= nvsf_grad_fold4.w;
          ##endif
        ##endif
      ##endif


      nvsf_foam_surface_folding =
        // folding for foam "clumping" on folded areas
            (1.0-nvsf_grad_fold0.z) +
            (1.0-nvsf_grad_fold1.z);
      ##if water_cascades != two
        nvsf_foam_surface_folding += (1.0 - nvsf_grad_fold2.z);
        ##if water_cascades != three
          nvsf_foam_surface_folding += (1.0 - nvsf_grad_fold3.z);
          ##if water_cascades != four && water_cascades != one_to_four
            nvsf_foam_surface_folding += (1.0 - nvsf_grad_fold4.z);
          ##endif
        ##endif
      ##endif
      nvsf_foam_surface_folding = max(-100, nvsf_foam_surface_folding);

      // Calculate normal here.
      nvsf_normal = float3(nvsf_grad, cascadesTexelScale0123.x);
      #if NORMALIZE_FFTWATER_NORMAL
      nvsf_normal = normalize(nvsf_normal);
      #endif

      ##if shader == wfx_render_foam_distorted || shader == wfx_render_height_distorted
        #define nvsf_hats_c2c_mul 1.0
        #define nvsf_hats_c2c_threshold 0.75
        #define nvsf_hats_c2c_scale 5.0 // the larger is the wave, the higher is the chance to start breaking at high folding, so folding for smaller cascade s is decreased
      ##else
        #define nvsf_hats_c2c_mul foam_hats_scale.x
        #define nvsf_hats_c2c_threshold foam_hats_scale.y
        #define nvsf_hats_c2c_scale foam_hats_scale.z // the larger is the wave, the higher is the chance to start breaking at high folding, so folding for smaller cascade s is decreased
      ##endif

      #define WHITEHORSES_JACOBIAN_THRESHOLD - nvsf_hats_c2c_threshold
      nvsf_foam_wave_hats =
        WHITEHORSES_JACOBIAN_THRESHOLD + (1.0-nvsf_grad_fold0.z) + nvsf_hats_c2c_scale * (1.0-nvsf_grad_fold1.z);

      ##if water_cascades != two
        float nvsf_hats_c2c_scale_pow2 = nvsf_hats_c2c_scale * nvsf_hats_c2c_scale;
        nvsf_foam_wave_hats += nvsf_hats_c2c_scale_pow2 * (1.0 - nvsf_grad_fold2.z);
        ##if water_cascades != three
          nvsf_foam_wave_hats += (nvsf_hats_c2c_scale_pow2 * nvsf_hats_c2c_scale) * (1.0 - nvsf_grad_fold3.z);
          ##if water_cascades != four && water_cascades != one_to_four
            float nvsf_hats_c2c_scale_pow4 = nvsf_hats_c2c_scale_pow2 * nvsf_hats_c2c_scale_pow2;
            nvsf_foam_wave_hats += nvsf_hats_c2c_scale_pow4 * (1.0 - nvsf_grad_fold4.z);
          ##endif
        ##endif
      ##endif

      nvsf_foam_wave_hats *= foam_hats_scale.x; // this allows hats to appear on breaking places only. Can be tweaked to represent Beaufort scale better

    }

    struct GradientsData
    {
      float3 normal;
      float foam_surface_folding;
      float foam_turbulent_energy;
      float foam_wave_hats;
    };

    GradientsData getWaterGradients(float3 world_pos, float view_dist, float perlin, float3 weights, ShoreData shore_data, float perlinSpotInfluence = 0.0)
    {
      float4 nvsf_blendfactors0123 = 1;
      float4 nvsf_blendfactors4567 = 1;
      float4 nvsf_tex_coord_cascade01, nvsf_tex_coord_cascade23, nvsf_tex_coord_cascade45;
      get_cascades(world_pos.xz, nvsf_tex_coord_cascade01, nvsf_tex_coord_cascade23, nvsf_tex_coord_cascade45);
      nvsf_blendfactors0123 *= float4(weights.x, 0.8 * weights.x + 0.2, 1, 1) * weights.y;
      nvsf_blendfactors0123 *= float4(shore_data.oceanWavesMultiplier.xx, shore_data.oceanDetailsMultiplier.xx);
      nvsf_blendfactors4567 *= shore_data.oceanDetailsMultiplier.x * weights.y;

      #if has_perlin_noise
        // First tow cascades create physical waves thus damp them only if they are small
        // Last two cascades do not make any contribution to physics therefore it safe to dump them
        float4 perlinWaves = saturate(5 * pow2(perlin));
        perlinWaves.x = 1.0;
        nvsf_blendfactors0123 *= lerp(float4(1, 1, 1, 1), perlinWaves * perlin_cascade_factors1, perlinSpotInfluence);
        nvsf_blendfactors4567 *= lerp(float4(1, 1, 1, 1), perlinWaves * perlin_cascade_factors2, perlinSpotInfluence);
      #endif

      GradientsData Output;
      get_gradients(nvsf_tex_coord_cascade01 * weights.z, nvsf_tex_coord_cascade23 * weights.z, nvsf_tex_coord_cascade45 * weights.z,
         nvsf_blendfactors0123, nvsf_blendfactors4567, 1,
        Output.foam_turbulent_energy, Output.foam_surface_folding, Output.normal, Output.foam_wave_hats);
      Output.foam_turbulent_energy = log(1.0 + Output.foam_turbulent_energy);

      return Output;
    }
  }
endmacro

macro USE_WATER_CASCADES_ROUGHNESS()
  (ps) {
    water_cascades_roughness0123@f4 = water_cascades_roughness0123;
    water_cascades_params@f2 = (water_roughness_base, water_cascades_dist_mul, 0, 0);
    water_cascades_lod_resolution0123@f4 = water_cascades_lod_resolution0123;
  }
  if (water_cascades == five)
  {
    (ps) {
      water_cascades_roughness4567@f4 = water_cascades_roughness4567;
      water_cascades_lod_resolution4567@f4 = water_cascades_lod_resolution4567;
    }
  }

  hlsl(ps) {
    float get_cascades_roughness(float dist_log2)
    {
      float roughness, roughness0, roughness1, roughness2, roughness3, roughness4;

      #define GET_ROUGHNESS(no, cascade_group, rg) \
      { \
        float mipK = saturate((dist_log2 - water_cascades_lod_resolution##cascade_group[no]) * water_cascades_params.y); \
        rg = lerp(0.0, water_cascades_roughness##cascade_group[no], mipK); \
      }

      GET_ROUGHNESS(0, 0123, roughness0);
      GET_ROUGHNESS(1, 0123, roughness1);
      ##if (water_cascades != two)
        GET_ROUGHNESS(2, 0123, roughness2);
        ##if (water_cascades != three)
          GET_ROUGHNESS(3, 0123, roughness3);
          ##if (water_cascades != four && water_cascades != one_to_four)
            GET_ROUGHNESS(0, 4567, roughness4);
          ##endif
        ##endif
      ##endif

      roughness = roughness0 + roughness1;
      ##if (water_cascades != two)
        roughness += roughness2;
        ##if (water_cascades != three)
          roughness += roughness3;
          ##if (water_cascades != four && water_cascades != one_to_four)
            roughness += roughness4;
          ##endif
        ##endif
      ##endif

      return max(water_cascades_params.x, roughness);
    }
  }
endmacro