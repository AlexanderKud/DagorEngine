include "shader_global.dshl"
include "gbuffer.dshl"

define_macro_if_not_defined USE_STATIC_SHADOW()
endmacro

int geom_node_hash = 0;

int prefabs_render_mode = 0;
interval prefabs_render_mode : to_loft_mask < 1, to_gbuffer;

float4 prefabs_color = (0, 0, 0, 0);

shader spline_solid
{
  if (in_editor == no)
  {
    dont_render;
  }

  cull_mode = none;
  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      ##if prefabs_render_mode == to_loft_mask
      float3 tang: TEXCOORD0;
      ##elif prefabs_render_mode == to_gbuffer
      float3 pointToEye: TEXCOORD0;
      ##endif
    };
  }
  static int index = 1;
  if (prefabs_render_mode == to_loft_mask)
  {
    (ps) { color@f2 = (((index+1)*8/255), geom_node_hash/65535.0,0,0); }

    hlsl(ps) {
      struct MRT_OUTPUT
      {
        float mask : SV_Target0;
        float id : SV_Target1;
        float4 dir : SV_Target2;
      };

      MRT_OUTPUT spline_solid_ps(VsOutput input)
      {
        MRT_OUTPUT ret;
        ret.mask = color.x;
        ret.id = color.y;
        ret.dir = float4(normalize(input.tang)*0.5 + 0.5, 1);
        return ret;
      }
    }
  }
  else if (prefabs_render_mode == to_gbuffer)
  {
    (ps) { color@f3 = prefabs_color; }
    hlsl(ps) {
      #define DISABLE_TOONSHADING 1
    }
    WRITE_GBUFFER()
    hlsl(ps) {
      GBUFFER_OUTPUT spline_solid_ps(VsOutput input HW_USE_SCREEN_POS)
      {
        UnpackedGbuffer gbuffer;
        init_gbuffer(gbuffer);
        init_albedo(gbuffer, pow(color, 2.2));
        float3 worldNormal = normalize(cross(ddx(input.pointToEye), ddy(input.pointToEye)));
        init_normal(gbuffer, worldNormal);
        init_reflectance(gbuffer, 0);
        return encode_gbuffer(gbuffer, input.pointToEye, GET_SCREEN_POS(input.pos));
      }
    }
  }


  channel float3 pos=pos;
  channel float2 tc[0]=tc[4];

  (vs) {
    globtm@f44 = globtm;
    world_local_x@f3 = world_local_x;
    world_local_y@f3 = world_local_y;
    world_local_z@f3 = world_local_z;
  }

  if (prefabs_render_mode == to_gbuffer)
  {
    (vs) {
      world_local_pos@f3 = world_local_pos;
      world_view_pos@f3 = world_view_pos
    }
  }

  hlsl(vs) {
    struct VsInput
    {
      float3 pos: POSITION;  // W defaults to 1.
      float2 tang_xz: TEXCOORD0;
    };

    VsOutput spline_solid_vs(VsInput input)
    {
      VsOutput output;
      output.pos = mul(float4(input.pos, 1), globtm);
      ##if prefabs_render_mode == to_loft_mask
        output.tang = normalize(
          world_local_x * input.tang_xz.x +
          world_local_y * sqrt(saturate(1-input.tang_xz.x*input.tang_xz.x-input.tang_xz.y*input.tang_xz.y)) +
          world_local_z * input.tang_xz.y
        );
      ##elif prefabs_render_mode == to_gbuffer
        output.pointToEye = world_view_pos - (world_local_x * input.pos.x +
                                              world_local_y * input.pos.y +
                                              world_local_z * input.pos.z + world_local_pos);
      ##endif
      return output;
    }
  }

  compile("target_vs", "spline_solid_vs");
  compile("target_ps", "spline_solid_ps");
}
