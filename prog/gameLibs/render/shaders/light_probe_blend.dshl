include "shader_global.dshl"

texture dynamic_cube_tex_1;
texture dynamic_cube_tex_2;
float dynamic_cube_tex_level = 0;
float dynamic_cube_tex_blend = 0;
int blend_faces = 0;
interval blend_faces : first<1, second;

hlsl {
  #include <get_cubemap_vector.hlsl>
}

shader blend_light_probes
{
  SUPPORT_GLOBAL_FRAME()

  cull_mode  = none;
  z_test = false;
  z_write = false;
  no_ablend;

  (ps) {
    dynamic_cube_tex_1@smpCube = dynamic_cube_tex_1;
    dynamic_cube_tex_2@smpCube = dynamic_cube_tex_2;
    dynamic_cube_tex_blend_level@f2 = (dynamic_cube_tex_blend, dynamic_cube_tex_level,0,0);
  }
  USE_POSTFX_VERTEX_POSITIONS()

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float2 tc : TEXCOORD0;
    };
  }


  hlsl(vs) {
    VsOutput blend_cubes_vs(uint vertex_id : SV_VertexID)
    {
      VsOutput output;
      float2 pos = getPostfxVertexPositionById(vertex_id);
      output.pos = float4(pos.x, pos.y, 1, 1);
      output.tc = pos.xy;
      return output;
    }
  }


  hlsl(ps) {
    struct MRT_OUTPUT
    {
      float4 color0:SV_Target0;
      float4 color1:SV_Target1;
      float4 color2:SV_Target2;
      #if !JUST_THREE_FACES
      float4 color3:SV_Target3;
      float4 color4:SV_Target4;
      float4 color5:SV_Target5;
      #define FACES
      #endif
    };

    MRT_OUTPUT blend_cubes_ps(VsOutput input)
    {
      half4 outColor[6];
      #define BLEND_FACE(faceNo, target)\
      {\
        float3 tc = GetCubemapVector(input.tc, faceNo);\
        fixed4 cube1 = texCUBElod(dynamic_cube_tex_1, float4(tc, dynamic_cube_tex_blend_level.y));\
        fixed4 cube2 = texCUBElod(dynamic_cube_tex_2, float4(tc, dynamic_cube_tex_blend_level.y));\
        target.rgb = lerp(cube1.rgb, cube2.rgb, dynamic_cube_tex_blend_level.x);\
        target.a = 1;\
      }

      MRT_OUTPUT res;
      #if !JUST_THREE_FACES
      BLEND_FACE(0, res.color0);
      BLEND_FACE(1, res.color1);
      BLEND_FACE(2, res.color2);
      BLEND_FACE(3, res.color3);
      BLEND_FACE(4, res.color4);
      BLEND_FACE(5, res.color5);
      #else
      ##if blend_faces == first
      BLEND_FACE(0, res.color0);
      BLEND_FACE(1, res.color1);
      BLEND_FACE(2, res.color2);
      ##else
      BLEND_FACE(3, res.color0);
      BLEND_FACE(4, res.color1);
      BLEND_FACE(5, res.color2);
      ##endif
      #endif
      return res;
    }
  }
  compile("target_vs", "blend_cubes_vs");
  compile("target_ps", "blend_cubes_ps");
}

texture tex;
float4x4 probetm;
int blend_face_no = 0;

shader blend_light_probe_face
{
  SUPPORT_GLOBAL_FRAME()

  cull_mode = none;
  z_test = false;
  z_write = false;
  no_ablend;

  (ps) {
    dynamic_cube_tex_1@smpCube = dynamic_cube_tex_1;
    tex@smp2d = tex;
    probetm@f44 = probetm;
    blend_face_no@f1 = (blend_face_no);
  }

  POSTFX_VS_TEXCOORD(1, texcoord)

  hlsl(ps) {
    float4 blend_cube_face_ps(VsOutput input) : SV_Target
    {
      float3 tc = GetCubemapVector(input.texcoord, int(blend_face_no+0.01));
      tc = mul(float4(tc, 0), probetm).xyz;
      half3 cube = texCUBElod(dynamic_cube_tex_1, float4(tc, 0)).rgb;
      half4 face = tex2D(tex, input.texcoord);
      return float4(lerp(cube, face.rgb, face.a), 1);
    }
  }

  compile("target_ps", "blend_cube_face_ps");
}
