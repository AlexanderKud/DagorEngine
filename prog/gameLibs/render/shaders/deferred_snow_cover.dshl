include "sparkles.dshl"

float4 envi_cover_albedo = (0.8, 0.98, 1.000, 0.000);
float4 envi_cover_specular_color = (0.500, 0.500, 0.500, 0.000);
float envi_cover_translucency = 1;
float envi_cover_smoothness = 0.35;
float envi_cover_normal_infl = -0.5;
float4 envi_cover_normal = (0.000, 1.000, 0.100, 0.000);
int envi_cover = 0;
interval envi_cover : envi_cover_off < 1, envi_cover_on;
float envi_cover_noise_high_frequency = 5;
float envi_cover_noise_low_frequency = 0.1;
float envi_cover_y_clamp_from_pos = 1;
float envi_cover_depth_smoothstep_max = 0.1;
float envi_cover_depth_pow_exponent = 0.125;

float envi_cover_noise_mask_factor = 0.3;
float envi_cover_depth_mask_threshold = 0.45;
float envi_cover_normal_mask_threshold = 0.3;
float envi_cover_depth_mask_contrast = 1;
float envi_cover_normal_mask_contrast = 1.5;
texture envi_cover_intensity_map;
float4 envi_cover_intensity_map_left_top_right_bottom = (-2048, 2048, 2048, -2048);
float4 land_detail_mul_offset always_referenced;
float envi_cover_water_level_fade_factor = 2.0;
float envi_cover_lowest_intensity = 0.0;
float envi_compatibility_intensity = 0.0;

macro INIT_DEFERRED_SNOW_COVER_NOISE(code, use_own_sampler, linear_sampler_state)
  if (use_own_sampler)
  {
    (code) {
      noise_128_tex_hash@smp2d = noise_128_tex_hash;
    }
    hlsl(code) {
      #define noise_linear_sampler_state noise_128_tex_hash_samplerstate
    }
  }
  else
  {
    (code) {
      noise_128_tex_hash@tex = noise_128_tex_hash hlsl { Texture2D<float> noise_128_tex_hash@tex; }
    }
    hlsl(code) {
      #define noise_linear_sampler_state linear_sampler_state
    }
  }
  hlsl(code) {
    #define USE_NOISE_128_TEX_HASH 1
    #define envi_cover_noise_high_frequency envi_cover_params2.x
    #define envi_cover_noise_low_frequency envi_cover_params2.y
  }
endmacro

macro INIT_DEFERRED_SNOW_COVER_INTENSITY_MAP(code, use_own_sampler, linear_sampler_state)
  (code) {
    envi_cover_intensity_map_scale_offset@f4 = (
      1.0 / (envi_cover_intensity_map_left_top_right_bottom.z - envi_cover_intensity_map_left_top_right_bottom.x),
      1.0 / (envi_cover_intensity_map_left_top_right_bottom.w - envi_cover_intensity_map_left_top_right_bottom.y),
      -envi_cover_intensity_map_left_top_right_bottom.x / (envi_cover_intensity_map_left_top_right_bottom.z - envi_cover_intensity_map_left_top_right_bottom.x),
      -envi_cover_intensity_map_left_top_right_bottom.y / (envi_cover_intensity_map_left_top_right_bottom.w - envi_cover_intensity_map_left_top_right_bottom.y));
  }
  if (use_own_sampler)
  {
    (code) {
      envi_cover_intensity_map@smp2d = envi_cover_intensity_map
    }
    hlsl(code) {
      #define intensity_map_linear_sampler_state envi_cover_intensity_map_samplerstate
    }
  }
  else
  {
    (code) {
      envi_cover_intensity_map@tex = envi_cover_intensity_map hlsl { Texture2D<float> envi_cover_intensity_map@tex; }
    }
    hlsl(code) {
      #define intensity_map_linear_sampler_state linear_sampler_state
    }
  }
  hlsl(code) {
    #define ENVI_COVER_INTENSITY_MAP 1
  }
endmacro

macro INIT_DEFERRED_SNOW_COVER_BASE(code, is_compatibility)
  if (is_compatibility)
  {
    (code) {
      envi_cover_params@f4 = (envi_cover_translucency, envi_cover_smoothness, envi_cover_depth_smoothstep_max,
        max(envi_cover_lowest_intensity, envi_compatibility_intensity + 0.001) * envi_cover);
    }
    hlsl(code) {
      #define IS_SNOW_COVER_COMPATIBILITY 1
      #define envi_cover_intensity envi_cover_params.w
    }
  }
  else
  {
    INIT_SPARKLES_BASE(code)
    USE_SPARKLES_BASE(code)

    (code) {
      envi_cover_params@f4 = (envi_cover_translucency, envi_cover_smoothness, envi_cover_depth_smoothstep_max, envi_cover_lowest_intensity);
      envi_cover_fpos_is_on@f2 = (envi_cover_y_clamp_from_pos, envi_cover, 0, 0);
    }
    hlsl(code) {
      #define envi_cover_y_clamp_from_pos (envi_cover_fpos_is_on.x)
      #define is_envi_cover_on (envi_cover_fpos_is_on.y)
    }
  }

  (code) {
    envi_cover_albedo__depth_contrast@f4 = (envi_cover_albedo.x, envi_cover_albedo.y, envi_cover_albedo.z, envi_cover_depth_mask_contrast);
    envi_cover_specular_color__clamp@f4 = (envi_cover_specular_color.x, envi_cover_specular_color.y, envi_cover_specular_color.z, envi_cover_water_level_fade_factor);
    envi_cover_thresholds@f4 = (
      envi_cover_noise_mask_factor,
      (2 * envi_cover_depth_mask_threshold - 1) * envi_cover_depth_mask_contrast,
      (2 * envi_cover_normal_mask_threshold - 1) * envi_cover_normal_mask_contrast,
      envi_cover_normal_mask_contrast);
    envi_cover_normal@f4 = (
      envi_cover_normal.x / (1 - envi_cover_normal_infl),
      envi_cover_normal.y / (1 - envi_cover_normal_infl),
      envi_cover_normal.z / (1 - envi_cover_normal_infl),
      -envi_cover_normal_infl / (1 - envi_cover_normal_infl));
    envi_cover_params2@f4 = (envi_cover_noise_high_frequency, envi_cover_noise_low_frequency, envi_cover_depth_pow_exponent, -water_level * envi_cover_water_level_fade_factor);
  }

  hlsl(code) {
    #define envi_cover_water_level_fade float2(envi_cover_specular_color__clamp.w, envi_cover_params2.w)
    #define envi_cover_translucency envi_cover_params.x
    #define envi_cover_smoothness envi_cover_params.y
    #define envi_cover_albedo envi_cover_albedo__depth_contrast.xyz
    #define depth_mask_contrast envi_cover_albedo__depth_contrast.w
    #define envi_cover_lowest_intensity envi_cover_params.w
    #define envi_cover_specular_color envi_cover_specular_color__clamp.xyz
    #define envi_cover_depth_smoothstep_max envi_cover_params.z
    #define envi_cover_depth_pow_exponent envi_cover_params2.z
  }
endmacro

macro INIT_DEFERRED_SNOW_COVER(code, use_own_sampler, stub_intensity_tex, linear_sampler_state)
  INIT_DEFERRED_SNOW_COVER_NOISE(code, use_own_sampler, linear_sampler_state)
  if (stub_intensity_tex)
  {
    INIT_DEFERRED_SNOW_COVER_INTENSITY_MAP(code, use_own_sampler, noise_linear_sampler_state)
  }
  else
  {
    if (envi_cover_intensity_map != NULL)
    {
      INIT_DEFERRED_SNOW_COVER_INTENSITY_MAP(code, true, 0)
    }
  }
  INIT_DEFERRED_SNOW_COVER_BASE(code, false)
endmacro

macro USE_DEFERRED_SNOW_COVER(code)
  hlsl(code) {
    float apply_snow_cover(float3 worldPos, float3 normal, float skylight_progress_value, inout half3 diffuse_color, inout half3 specular_color,
      inout half3 translucency_color, inout half translucency, inout half linear_roughness, inout half ggx_alpha)
    {
#if IS_SNOW_COVER_COMPATIBILITY
      float depthDist = 1;
#else
      float vignetteEffect = 0;
      float2 lerpFactor;
      float4 depthSamples = gatherWorldBlurredDepth(worldPos.xyz, vignetteEffect, lerpFactor);
      depthSamples = clamp(depthSamples, worldPos.y - envi_cover_y_clamp_from_pos, worldPos.y + envi_cover_y_clamp_from_pos);
      float finalDepth = lerpGatheredBlurredDepth(depthSamples, lerpFactor);
      float depthDist = worldPos.y + 1 - finalDepth;
      depthDist.x = lerp(depthDist.x, 1.0, vignetteEffect);
#endif
      float2 depthNormalFactor = saturate(float2(
        depthDist,
        dot(envi_cover_normal.xyz, normal) + envi_cover_normal.w
      ));

#if USE_NOISE_128_TEX_HASH
      float noiseSnowInfluenceHi = noise_128_tex_hash.SampleLevel(noise_linear_sampler_state, worldPos.xz * envi_cover_noise_high_frequency, 0).x;
      float noiseSnowInfluenceLo = noise_128_tex_hash.SampleLevel(noise_linear_sampler_state, worldPos.xz * envi_cover_noise_low_frequency, 0).x;
      float noiseInfl = saturate(noiseSnowInfluenceHi * noiseSnowInfluenceLo) * envi_cover_thresholds.x - envi_cover_thresholds.x + 1;
#else
      float noiseInfl =  1 - envi_cover_thresholds.x;
#endif

#if ENVI_COVER_INTENSITY_MAP
      float2 tc = worldPos.xz * envi_cover_intensity_map_scale_offset.xy + envi_cover_intensity_map_scale_offset.zw;
      // do manually clamp because the shared sampler can be with the different addressing
      tc = saturate(tc);
      // sample an intensity with the shared or own sampler
      float intensity = max(envi_cover_intensity_map.SampleLevel(intensity_map_linear_sampler_state, tc, 0).r, envi_cover_lowest_intensity);
#else
      float intensity = envi_cover_lowest_intensity;
#endif

      // equals to: (2 * envi_cover_normal_mask_threshold * intensity - 1) * envi_cover_normal_mask_contrast
      float normalThreshold = envi_cover_thresholds.z * intensity + envi_cover_thresholds.w * intensity - envi_cover_thresholds.w;

      depthNormalFactor.x = smoothstep(0, envi_cover_depth_smoothstep_max, saturate(pow(depthNormalFactor.x, envi_cover_depth_pow_exponent) - noiseInfl));
      depthNormalFactor.y = depthNormalFactor.y * 2 * noiseInfl - noiseInfl;
      depthNormalFactor = saturate(depthNormalFactor * float2(depth_mask_contrast, envi_cover_thresholds.w) + float2(envi_cover_thresholds.y, normalThreshold));

      BRANCH
      if (depthNormalFactor.x > 1e-3f && depthNormalFactor.y > 1e-3f)
      {
        float snowInfluence = depthNormalFactor.x * depthNormalFactor.y;
        snowInfluence = sqrt(snowInfluence);
        snowInfluence *= saturate(worldPos.y * envi_cover_water_level_fade.x + envi_cover_water_level_fade.y);

        translucency_color = diffuse_color;
        diffuse_color = lerp(diffuse_color, envi_cover_albedo, snowInfluence);
        specular_color = lerp(specular_color, envi_cover_specular_color, snowInfluence);
        float smoothness = 1 - linear_roughness;
        smoothness = lerp(smoothness, envi_cover_smoothness, snowInfluence);
        translucency = envi_cover_translucency;
#if !IS_SNOW_COVER_COMPATIBILITY
        computeSnowSparkle(worldPos.xyz, world_view_pos.xyz, min(0.99, 1 - skylight_progress_value), normal, smoothness);
#endif
        linear_roughness = linearSmoothnessToLinearRoughness(smoothness);
        ggx_alpha = max(1e-4, linear_roughness*linear_roughness);

        return snowInfluence;
      }
      return 0;
    }
  }
endmacro

macro DEFERRED_SNOW_COVER_COMPATIBILITY_WITH_PARAMS(use_noise, use_intensity_map)
  if (allow_deferred_snow_cover_comp)
  {
    if (use_noise)
    {
      INIT_DEFERRED_SNOW_COVER_NOISE(ps, true, 0)
      if (use_intensity_map)
      {
        INIT_DEFERRED_SNOW_COVER_INTENSITY_MAP(ps, false, noise_linear_sampler_state)
      }
    }
    else if (use_intensity_map)
    {
      INIT_DEFERRED_SNOW_COVER_INTENSITY_MAP(ps, true, 0)
    }
    INIT_DEFERRED_SNOW_COVER_BASE(ps, true)
    USE_DEFERRED_SNOW_COVER(ps)

    hlsl(ps) {
      #define DEFERRED_SNOW_COVER_COMPATIBILITY 1
    }
  }
endmacro

macro DEFERRED_SNOW_COVER_COMPATIBILITY()
  DEFERRED_SNOW_COVER_COMPATIBILITY_WITH_PARAMS(false, true)
endmacro