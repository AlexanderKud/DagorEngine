include "decals.dshl"
include "global_consts.dshl"

texture dyn_decals_noise;
float4 cockpit_pos;
float cockpit_radius = 1.5;

int planar_decal_count = 0;
interval planar_decal_count : zero < 1, non_zero;

macro DYNAMIC_DECALS_PARAMS()
  hlsl(ps)
  {
    #include <render/decals/dynamic_decals_params.hlsli>
  }
endmacro

// Uncomment this and define DYNAMIC_DECALS_TWEAKING in dynamicDecalsParams.hlsl to tweak decal params and unlock console vars
/*
float4 dyn_decals_params = (1.0, 0.4, 20, 0.2);
float4 dyn_decals_params2 = (2, 10.0, 0, 0);

float4 dyn_decals_cutting_color = (0.4, 0.4, 0.4, 1.0);
float4 dyn_decals_burn_color = (0.01, 0.01, 0.01, 0.8);
float4 dyn_decals_wood_color = (0.9, 0.71, 0.38, 1.0);
float4 dyn_decals_fabric_color = (0.9, 0.8, 0.5, 1.0);

float4 dyn_decals_steel_hole_noise = (3.0, 1.0, 0.7, 0.9);
float4 dyn_decals_wood_hole_noise = (1.0, 1.0, 0.65, 1.5);
float4 dyn_decals_fabrics_hole_noise = (1.0, 1.0, 0.65, 1.5);
float4 dyn_decals_steel_wreackage_noise = (1.0, 1.0, 0.0, 0.0);
float4 dyn_decals_wood_wreackage_noise = (1.0, 1.0, 0.0, 0.0);
float4 dyn_decals_fabric_wreackage_noise = (1.0, 1.0, 0.0, 0.0);
float4 dyn_decals_holes_burn_mark_noise = (0.2, 2.0, 3.0, 1.0);

float4 dyn_decals_diff_mark_params = (1.3, 0.03, 3.0, 0.0); //mult/min/max
float4 dyn_decals_burn_mark_params = (2.0, 0.03, 3.0, 0.0); //mult/min/max


float dyn_decals_smoothness = 0.3;
float dyn_decals_metalness = 0.6;

macro DYNAMIC_DECALS_PARAMS()
  dyn_decals_params@f4 = (dyn_decals_params); // noise_scale, noise_uv_mul, color_dist_mul, rim_dist_mul
  dyn_decals_params2@f4 = (dyn_decals_params2);
  dyn_decals_cutting_color@f4 = (dyn_decals_cutting_color);
  dyn_decals_burn_color@f4 = dyn_decals_burn_color;
  dyn_decals_wood_color@f4 = dyn_decals_wood_color;
  dyn_decals_fabric_color@f4 = dyn_decals_fabric_color;
  dyn_decals_material@f2 = float4(dyn_decals_smoothness, dyn_decals_metalness, 0, 0);
  dyn_decals_steel_hole_noise@f4 = dyn_decals_steel_hole_noise;
  dyn_decals_wood_hole_noise@f4 = dyn_decals_wood_hole_noise;
  dyn_decals_fabrics_hole_noise@f4 = dyn_decals_fabrics_hole_noise;
  dyn_decals_steel_wreackage_noise@f4 = dyn_decals_steel_wreackage_noise;
  dyn_decals_wood_wreackage_noise@f4 = dyn_decals_wood_wreackage_noise;
  dyn_decals_fabric_wreackage_noise@f4 = dyn_decals_fabric_wreackage_noise;
  dyn_decals_holes_burn_mark_noise@f4 = dyn_decals_holes_burn_mark_noise;
  if (compatibility_mode == compatibility_mode_off)
  {
    (ps) {
      dyn_decals_diff_mark_params@f4 = dyn_decals_diff_mark_params;
      dyn_decals_burn_mark_params@f4 = dyn_decals_burn_mark_params;
    }
  }
endmacro
*/

macro INIT_DYNAMIC_DECALS()
  (ps) {
    dyn_noise@smp2d = dyn_decals_noise;
    cockpit_pos@f4 = (cockpit_pos.x, cockpit_pos.y, cockpit_pos.z, 0);
    cockpitFadeSmoothness@f1 = cockpitFadeSmoothness;
    cockpit_radius_sq@f1 = cockpit_radius * cockpit_radius;
  }
  DYNAMIC_DECALS_PARAMS()
endmacro

macro USE_DYNAMIC_DECALS(cutting_planes, capsule_holes, sphere_holes, burn_marks)
  hlsl(ps) {
    #include "dynmodel_consts.hlsli"

    #define MAX_CAPSULES 10
    #define MAX_SPHERES 15 // for boats

    #define MATERIAL_TYPE_STEEL 0
    #define MATERIAL_TYPE_WOOD 1
    #define MATERIAL_TYPE_FABRIC 2

    struct DynCapsule
    {
      float4 botR;
      float4 top;
    };

    struct DynPlane
    {
      float4 plane;
    };

    struct DynSphere
    {
      float4 sphere;
    };

    struct DynDecals
    {
      float3 modelPos;
      float3 modelNormal;
      float2 modelUV;
      float2 dynrend_params_offset_count;

      int orMode;
      int capsuleHolesCount;
      int sphereHolesCount;
      int burnMarksCount;

      int material;

      float4 uvNorm;
      float dist;
      float clipDist;
      float rimDist;
      float diffDist;

      float rimDistGm;
      float diffDistGm;

      float alphaIn;
      float alphaOut;

      float alphaInGm;
      float alphaOutGm;

      float cockpitFade;
    };

    float unpack_value(uint value, float precision, float minValue, float maxValue)
    {
      return minValue + (value / precision) * (maxValue - minValue);
    }

    float2 box_projection(float3 vec, float3 normal)
    {
      return abs(normal.x) > 0.707 ? vec.yz : (abs(normal.y) > 0.707 ? vec.xz : vec.xy);
    }

    float cut_stab(int or_mode, float d0, float d1, float d2)
    {
      return or_mode == 1 ? min(min(d0, d1), d2) : max(max(d0, d1), d2);
    }

    float cut_plane_tail(int or_mode, float d0, float d1, float d2, float d3, float d4)
    {
      return or_mode == 1 ? min(min(min(min(d0, d1), d2), d3), d4) : max(d0, d4);
    }

    float cut_plane_wing(int or_mode, float d0, float d1, float d2, float d3)
    {
      return or_mode == 1 ? min(min(min(d0, d1), d2), d3) : max(max(max(d0, d1), d2), d3);
    }

    float prepare_dyn_planes(DynDecals decals, int offset, out float4 uv_rad, out float4 uv_norm, out int material)
    {
      #define D_PLANE(plane_no) \
        float4 value##plane_no = GET_DYNREND_PARAM(offset + plane_no, decals.dynrend_params_offset_count); \
        value##plane_no.w = unpack_value((asuint(value##plane_no.w) & 0x1fffffff), 0x1fffffff, -100, 100); \
        float d##plane_no = dot(float4(decals.modelPos, 1.0), value##plane_no);
      D_PLANE(0); D_PLANE(1); D_PLANE(2); D_PLANE(3); D_PLANE(4); D_PLANE(5); D_PLANE(6); D_PLANE(7); D_PLANE(8); D_PLANE(9); D_PLANE(10);
      #define GET_PLANE(plane_no) \
        float4 plane##plane_no = GET_DYNREND_PARAM(offset + plane_no, decals.dynrend_params_offset_count); \
        plane##plane_no.w = unpack_value((asuint(plane##plane_no.w) & 0x1fffffff), 0x1fffffff, -100, 100);
      GET_PLANE(0); GET_PLANE(1); GET_PLANE(2); GET_PLANE(3); GET_PLANE(4); GET_PLANE(5);

      float distMin = 1000.0;
      float distAbs = distMin;
      float distAbsMin = distMin;
      float4 minPlane = float4(0, 0, 0, -1);
      int planeIndex = -1;
      #define CUT_PLANE_DIST(p0, dist, index) \
        distAbs = abs(dist); \
        minPlane = distAbs < distAbsMin ? p0 : minPlane; \
        planeIndex = distAbs < distAbsMin ? index : planeIndex; \
        distAbsMin = min(distAbsMin, distAbs); \
        distMin = min(distMin, dist);
      
      CUT_PLANE_DIST(plane0, cut_plane_wing(decals.orMode, d0, d6, d7, d9), 0);
      CUT_PLANE_DIST(plane1, cut_plane_wing(decals.orMode, d1, d6, d8, d9), 1);
      CUT_PLANE_DIST(plane2, cut_plane_tail(decals.orMode, d2, d3, d4, d5, d9), 2);
      CUT_PLANE_DIST(plane3, cut_stab(decals.orMode, d3, d9, d10), 3);
      CUT_PLANE_DIST(plane4, cut_stab(decals.orMode, d4, d9, d10), 4);
      CUT_PLANE_DIST(plane5, cut_stab(decals.orMode, d5, d9, d10), 5);
      
      float materialParam = GET_DYNREND_PARAM(offset + planeIndex, decals.dynrend_params_offset_count).w;
      materialParam = (asuint(materialParam) & 0x60000000) >> 29u;
      material = materialParam;

      uv_norm = float4(minPlane.xyz, 0);
      uv_rad = float4(box_projection(decals.modelPos, minPlane.xyz), 0, sign(minPlane.w));

      return distMin;
    }

    struct DynCapsuleResult
    {
      float dist;
      float distFromTop;
      int index;
    };

    DynCapsuleResult prepare_dyn_capsules(DynDecals decals, int count, int offset, out float4 uv_rad, out float4 uv_norm,
      int firstExcludedSphereId = -1, int secondExcludedSphereId = -1)
    {
      DynCapsuleResult result = (DynCapsuleResult)0;
      uv_rad = 0;
      uv_norm = 0;
      result.dist = 1000;
      result.index = -1;
      if (count > 0)
      {
        float3 minDistVec = 0;
        float4 minPrim = 0;

        LOOP
        for (int i = 0; i < min(MAX_CAPSULES, count); ++i)
        {
          if (i == firstExcludedSphereId || i == secondExcludedSphereId)
            continue;
          DynCapsule dynCapsule;
          dynCapsule.botR = GET_DYNREND_PARAM(offset + i * 2, decals.dynrend_params_offset_count);
          dynCapsule.top = GET_DYNREND_PARAM(offset + i * 2 + 1, decals.dynrend_params_offset_count);

          float3 lineVec = dynCapsule.botR.xyz - dynCapsule.top.xyz;
          float3 capsuleToPosVec = decals.modelPos.xyz - dynCapsule.top.xyz;
          float relativeLength = saturate(dot(capsuleToPosVec, lineVec) / dot(lineVec, lineVec));
          float3 distVec = capsuleToPosVec - relativeLength * lineVec;
          float dist = length(distVec) - dynCapsule.botR.w;

          minDistVec = dist < result.dist ? distVec : minDistVec;
          minPrim = dist < result.dist ? float4(dynCapsule.top.xyz, dynCapsule.botR.w) : minPrim;
          result.index = dist < result.dist ? i : result.index;
          result.dist = min(dist, result.dist);
        }

        uv_norm = float4(-minDistVec / max(result.dist + minPrim.w, 0.001), 1);
        uv_rad = float4(uv_norm.xz, dot(minPrim.xyz, float3(1, 1, 1)), minPrim.w);

        return result;
      }
      return result;
    }

    struct DynSphereResult
    {
      int index;
      float4 sphere;
      float dist;
      float3 distVec;
    };

    DynSphereResult prepare_dyn_spheres_ground_model(DynDecals decals, int count, int offset, int stride,
      out float4 uv_rad, out float4 uv_norm)
    {
      DynSphereResult result = (DynSphereResult)0;
      result.dist = 1000;
      LOOP
      for (int i = 0; i < min(MAX_SPHERES, count); ++i)
      {
        DynSphere sph;
        sph.sphere = GET_DYNREND_PARAM(offset + i * stride, decals.dynrend_params_offset_count);
        float3 distVec = decals.modelPos.xyz - sph.sphere.xyz;
        float dist = length(distVec) - sph.sphere.w;
        result.index = dist < result.dist ? i : result.index;
        result.distVec = dist < result.dist ? distVec : result.distVec;
        result.sphere = dist < result.dist ? sph.sphere : result.sphere;
        result.dist = min(dist, result.dist);
      }

      uv_norm = float4(-result.distVec / max(result.dist + result.sphere.w, 0.001), 1); // So that we have circular noise.
      uv_rad = float4(uv_norm.xz, dot(result.sphere.xyz, float3(1, 1, 1)), result.sphere.w);

      return result;
    }

    bool set_dyn_layer_ground_model(inout DynDecals decals, float dist, float4 uv_rad, float4 uv_norm, bool clip, bool diff, bool rim)
    {
      float uvOffset = uv_rad.z;
      float radius = abs(uv_rad.w);
      float noiseSample = h4tex2D(dyn_noise, uvOffset + dyn_decals_params.y * uv_rad.xy * radius).a;
      float radiusNoise = uv_rad.w * (-0.5 + noiseSample) * dyn_decals_params.x;
      float distNoise = clamp(radiusNoise, -radius, radius);
      dist += distNoise;
      bool sel = dist < decals.dist;
      decals.uvNorm = sel ? uv_norm : decals.uvNorm;
      decals.dist = min(decals.dist, dist);
      decals.clipDist = clip ? min(decals.clipDist, dist) : decals.clipDist;
      decals.rimDistGm = rim ? min(decals.rimDistGm, dist) : decals.rimDistGm;
      decals.diffDistGm = diff ? min(decals.diffDistGm, dist) : decals.diffDistGm;
      return sel;
    }

    void set_dyn_layer(inout DynDecals decals, float dist, float4 uv_rad, float4 uv_norm, bool clip, bool diff, bool rim, int material,
      float4 rand_noises = float4(1.0, 1.0, 0.0, 0.0), float4 rim_rand_noises = float4(1.0, 1.0, 0.0, 0.0),
      float4 rim_params = float4(1.0, 0.0, 10.0, 0.0), float4 diff_params = float4(1.0, 0.0, 10.0, 0.0))
    {
      float uvOffset = uv_rad.z;
      float radius = abs(uv_rad.w);
      float diffDist = clamp(dist * diff_params.x, diff_params.y, diff_params.z);

      float noiseSample = tex2Dlod(dyn_noise, float4(uvOffset + dyn_decals_params.y * uv_rad.xy * rand_noises.x, 0, 0)).a * rand_noises.y +
        tex2Dlod(dyn_noise, float4(uvOffset + dyn_decals_params.y * uv_rad.xy * rand_noises.z, 0, 0)).a * rand_noises.w;
      float radiusNoise = uv_rad.w * (-0.5 + noiseSample) * dyn_decals_params.x;
      float distNoise = clamp(radiusNoise, -radius, radius);
      distNoise += decals.cockpitFade;
      diffDist += distNoise;

      dist += distNoise;
      bool sel = dist < decals.dist;
      decals.uvNorm = sel ? uv_norm : decals.uvNorm;
      decals.dist = min(decals.dist, dist);
      decals.clipDist = clip ? min(decals.clipDist, dist) : decals.clipDist;
      decals.material = diff && (diffDist < decals.diffDist) ? material : decals.material;
      decals.diffDist = diff ? min(decals.diffDist, diffDist) : decals.diffDist;

      float rimNoiseSample = tex2Dlod(dyn_noise, float4(uvOffset + dyn_decals_params.y * uv_rad.xy * rim_rand_noises.x, 0, 0)).a * rim_rand_noises.y +
        tex2Dlod(dyn_noise, float4(uvOffset + dyn_decals_params.y * uv_rad.xy * rim_rand_noises.z, 0, 0)).a * rim_rand_noises.w;
      rimNoiseSample += decals.cockpitFade;
      float rimDist = dist - clamp(uv_rad.w * rim_params.x * rimNoiseSample, diff_params.y, diff_params.z);
      decals.rimDist = rim ? min(decals.rimDist, rimDist) : decals.rimDist;
    }

    void init_dyn_decals(out DynDecals decals, float3 model_pos, float3 model_normal, float2 dynrend_params_offset_count)
    {
      int offset = NUM_GENERIC_PER_INSTANCE_PARAMS;

      decals = (DynDecals)0;
      decals.modelPos = model_pos;
      decals.modelNormal = model_normal;
      decals.modelUV = box_projection(model_pos, model_normal);
      decals.dynrend_params_offset_count = dynrend_params_offset_count;

      float4 hdr1 = GET_DYNREND_PARAM(offset, decals.dynrend_params_offset_count);
      offset += 1;

      decals.orMode = (int)hdr1.x;
      decals.capsuleHolesCount = (int)hdr1.y;
      decals.sphereHolesCount = (int)hdr1.z;
      decals.burnMarksCount = (int)hdr1.w;

      decals.material = 0;

      decals.dist = 1000;
      decals.clipDist = 1000;
      decals.rimDist = 1000;
      decals.diffDist = 1000;
      decals.diffDistGm = 1000;
      decals.rimDistGm = 1000;

      float3 modelPosToCockpit = model_pos - cockpit_pos.xyz;
      float lengthCircleSq = dot(modelPosToCockpit, modelPosToCockpit);
      decals.cockpitFade = smoothstep(lengthCircleSq - cockpitFadeSmoothness, lengthCircleSq + cockpitFadeSmoothness, cockpit_radius_sq);

    #if cutting_planes
    {
      float4 uvRad;
      float4 uvNorm;
      int material = 0;
      float dist = prepare_dyn_planes(decals, offset, uvRad, uvNorm, material);
      float4 randNoise = material == MATERIAL_TYPE_STEEL ? dyn_decals_steel_wreackage_noise.rgba
        : material == MATERIAL_TYPE_WOOD ? dyn_decals_wood_wreackage_noise.rgba : dyn_decals_fabric_wreackage_noise.rgba;
      set_dyn_layer(decals, dist, uvRad, uvNorm, true, true, false, material, randNoise,
        float4(1.0, 0.0, 10.0, 0.0), float4(1.0, 0.0, 10.0, 0.0));
    }
    #endif
      offset += 11;
    #if capsule_holes
    {
      int firstSphereIndex = -1;
      int secondSphereIndex = -1;
      for (int i = 0; i<3; ++i)
      {
        DynCapsuleResult dynCapsule = (DynCapsuleResult)0;
        float4 uvRad;
        float4 uvNorm;
        dynCapsule = prepare_dyn_capsules(decals, decals.capsuleHolesCount, offset, uvRad, uvNorm, firstSphereIndex, secondSphereIndex);

        if (dynCapsule.index < 0)
          break;
        if (i == 0)
          firstSphereIndex = dynCapsule.index;
        if (i == 1)
          secondSphereIndex = dynCapsule.index;

        int isExplodedMaterial = asuint(GET_DYNREND_PARAM(offset + dynCapsule.index * 2 + 1, decals.dynrend_params_offset_count).w);
        bool isExploded = (isExplodedMaterial & 1) > 0;
        int material = (isExplodedMaterial & 6) >> 1;
        float4 noiseComponent = material == MATERIAL_TYPE_STEEL ? dyn_decals_steel_hole_noise.rgba
          : material == MATERIAL_TYPE_WOOD ? dyn_decals_wood_hole_noise.rgba : dyn_decals_fabrics_hole_noise.rgba;

        set_dyn_layer(decals, dynCapsule.dist, uvRad, uvNorm, true, true, isExploded, material,
          noiseComponent, dyn_decals_holes_burn_mark_noise, dyn_decals_burn_mark_params, dyn_decals_diff_mark_params);
      }
    }
    #endif
      offset += decals.capsuleHolesCount * 2;
    #if sphere_holes
    {
      float4 uv_rad, uv_norm;
      DynSphereResult dynSphere = prepare_dyn_spheres_ground_model(decals, decals.sphereHolesCount, offset, 1, uv_rad, uv_norm);

      set_dyn_layer_ground_model(decals, dynSphere.dist, uv_rad, uv_norm, true, true, false);
    }
    #endif
      offset += decals.sphereHolesCount * 1;
    #if burn_marks
    {
      float4 uv_rad, uv_norm;
      DynSphereResult dynSphere = prepare_dyn_spheres_ground_model(decals, decals.burnMarksCount, offset, 1, uv_rad, uv_norm);

      set_dyn_layer_ground_model(decals, dynSphere.dist, uv_rad, uv_norm, false, false, true);
    }
    #endif
      offset += decals.burnMarksCount * 1;

      decals.alphaIn = saturate(1.0 - pow4(saturate(decals.diffDist * dyn_decals_params.z)));
      decals.alphaOut = saturate(1.0 - pow4(saturate(decals.rimDist * dyn_decals_params2.x)));

      float alphaIn2 = pow4(saturate(-decals.rimDistGm * dyn_decals_params2.y));
      decals.alphaInGm = lerp(decals.alphaIn, 1.0, alphaIn2);
      decals.alphaOutGm = saturate(1.0 - pow4(saturate(decals.rimDistGm * dyn_decals_params2.x)));
    }

    void clip_dyn_decals(DynDecals decals)
    {
      #if cutting_planes || capsule_holes || sphere_holes
        clip(decals.clipDist);
      #endif
    }

    void apply_dyn_decals_local_normal(DynDecals decals, inout half3 local_normal)
    {
      float3 decalNorm = decals.uvNorm.xyz;
      if (dot(decals.modelNormal, local_normal) <= 0.0 && decals.uvNorm.w != 0.0)
        decalNorm = -decalNorm;
      local_normal = half3(lerp(float3(local_normal), decalNorm, 0.5 * decals.alphaIn * (decals.alphaIn < 1)));
    }

    void apply_dyn_decals_camouflage(DynDecals decals, inout half3 diffuseColor, inout half metalness, inout half smoothness, inout half camouflage)
    {
      diffuseColor.rgb = half3(lerp(diffuseColor.rgb, dyn_decals_burn_color.rgb, dyn_decals_burn_color.a * decals.alphaOutGm * (1.0 - decals.alphaInGm)));
      metalness = half(lerp(metalness, dyn_decals_material.y, decals.alphaInGm));
      smoothness = half(lerp(smoothness, dyn_decals_material.x, decals.alphaInGm));
      camouflage = half(lerp(camouflage, 0.h, pow2(decals.alphaOutGm)));
    }

    void apply_dyn_decals_diffuse(DynDecals decals, inout half3 diffuseColor, inout half metalness, inout half smoothness)
    {
      diffuseColor.rgb = half3(lerp(diffuseColor.rgb, dyn_decals_burn_color.rgb, dyn_decals_burn_color.a * decals.alphaOut * (1.0 - decals.alphaIn)));
      metalness = half(lerp(metalness, dyn_decals_material.y, decals.alphaIn));
      smoothness = half(lerp(smoothness, dyn_decals_material.x, decals.alphaIn));

      float3 diffCol = float3(0.0, 0.0, 0.0);
      BRANCH
      if (decals.material == MATERIAL_TYPE_STEEL)
        diffCol = tex2Dlod(dyn_noise, float4(decals.modelUV * dyn_decals_params.w, 0, 0)).rgb;
      else
        diffCol = decals.material == MATERIAL_TYPE_WOOD ? dyn_decals_wood_color.rgb : dyn_decals_fabric_color.rgb;

      diffuseColor.rgb = half3(lerp(diffuseColor.rgb, dyn_decals_cutting_color.rgb, decals.alphaIn));
      diffuseColor.rgb = half3(lerp(diffuseColor.rgb, diffCol, decals.alphaIn));
    }

    void cut_planes(float3 model_pos, float2 dynrend_params_offset_count)
    {
      DynDecals decals;
      init_dyn_decals(decals, model_pos, float3(0, 1, 0), dynrend_params_offset_count);
      clip_dyn_decals(decals);
    }
  }
endmacro
