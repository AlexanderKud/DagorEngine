texture dynamic_decals_atlas;

// We provide decals through per-instance const buffer which is
// set inside dynmodels renderer. For now it's needed only for decals
// so we don't clog all dynmodel shaders with logic related to this buffer
// and we declare and use it here.
// Although it's generally an arbitrary const buffer which can be provided
// per-instance, so if needed also for something else, it should be moved
// to common dynmodels code and used accordingly.
buffer instance_const_data_buffer;

macro INIT_PLANAR_DECALS()
  (ps) {
    atlas@smp2d = dynamic_decals_atlas;
    planar_decal_count@i1 = planar_decal_count;
  }
endmacro

macro USE_PLANAR_DECALS()
  (ps) {
    planar_decals_params@cbuf = instance_const_data_buffer hlsl {
      #include <render/decals/planar_decals_params.hlsli>
      cbuffer planar_decals_params@cbuf
      {
        PlanarDecalsParamsSet planar_decals_params;
      }
    }
  }

  hlsl(ps) {
    #define TANK_DECAL_SMOOTHNESS 0.4f
    #define DIFFUSE_TO_DECAL 0.01f
    #define DIFFUSE_MUL_RCP  (1.0f / (DIFFUSE_TO_DECAL * DIFFUSE_TO_DECAL + 1e-6))

    half get_influence(float influence_raw)
    {
      const float minAng80 = 0.174;
      const float maxAng45 = 0.707;
      const float influenceMult = 8.0;
      return (half)saturate((influence_raw - minAng80) * influenceMult / (maxAng45 - minAng80));
    }

    half apply_decals(inout half3 diffuseColor, float3 model_pos, float3 model_normal)
    {
      float4 modelPos4 = float4(model_pos, 1);
      half diffMul = saturate(luminance(diffuseColor.rgb) * (half)DIFFUSE_MUL_RCP);
      half4 decalWidths = (half4)planar_decals_params.decalWidths;

      half decalEffectTotalInv = 1.0h;
      ##assert(planar_decal_count <= MAX_PLANAR_DECALS);
      for (int decalId = 0; decalId < planar_decal_count; ++decalId)
      {
        PlanarDecalTransformAndUV tmAndUv = planar_decals_params.tmAndUv[decalId];

        half influenceRaw[2] = {
          dot(model_normal, tmAndUv.tmRow2[0].xyz),
          dot(model_normal, tmAndUv.tmRow2[1].xyz)
        };

        int sideIdx = influenceRaw[0] > influenceRaw[1] ? 0 : 1;

        half3 uvz = half3(
          dot(modelPos4, tmAndUv.tmRow0[sideIdx]),
          dot(modelPos4, tmAndUv.tmRow1[sideIdx]),
          dot(modelPos4, tmAndUv.tmRow2[sideIdx])
        );

        float4 atlasUvOriginScale = planar_decals_params.tmAndUv[decalId].atlasUvOriginScale;
        float2 atlasUv = uvz.xy * atlasUvOriginScale.zw + atlasUvOriginScale.xy;
        float2 atlasUvDdx = ddx(atlasUv);
        float2 atlasUvDdy = ddy(atlasUv);
        // left part - vectorized [0,1] range check
        float2 l = float2(length(atlasUvDdx), length(atlasUvDdy));
        if (any(float4(uvz.xy - l, 1, 1) < float4(0, 0, uvz.xy + l)) || abs(uvz.z) >= decalWidths[decalId] - max(l.x, l.y))
          continue;
        half4 decal = (half4)tex2Dgrad(atlas, atlasUv, atlasUvDdx, atlasUvDdy);
        half decalEffect = get_influence(influenceRaw[sideIdx]) * decal.a;
        diffuseColor.rgb = lerp(diffuseColor.rgb, diffMul * decal.rgb, decalEffect);
        decalEffectTotalInv *= 1.0h - decalEffect;
      }

      return decalEffectTotalInv;
    }
  }
endmacro
