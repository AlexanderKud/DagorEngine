include "pbr.dshl"
include "fake_static_shadow.dshl"

texture perlin_noise3d;

macro GLOBE_MODEL_GAME_SPECIFICS()
  STANDARD_BRDF_SHADING()
  //UGLY inline resolving of gbuffer into a float4
  //Assume forward rendering for this, since that does that anyway.
  //The shader needs variables from global frame, but can't actually support it, because assumes here won't change that block.
  assume compatibility_mode = compatibility_mode_on;
  assume mobile_render = forward;
  GLOBAL_FRAME_CONTENT()
  hlsl {
    #define FORWARD_NO_STATIC_SHADOW 1
  }
  WRITE_GBUFFER()
  (ps)
  {
    perlin_noise3d@smp3d = perlin_noise3d;
  }
  hlsl (ps)
  {
    float3 perlin_noise_sample(float2 uv)
    {
      return tex3D(perlin_noise3d, float3(uv, 0)).xyz;
    }
    float3 perlin_noise_sample_lod(float4 uv)
    {
      return tex3Dlod(perlin_noise3d, uv).xyz;
    }
    float4 resolve_gbuffer(UnpackedGbuffer gbuf, float3 pointToEye, float3 lightDir, half3 lightColor, float3 worldViewPos, float2 screenPos)
    {
      return encode_gbuffer(gbuf, pointToEye, float4(screenPos.xy,0,0)).color;
    }
  }
endmacro
