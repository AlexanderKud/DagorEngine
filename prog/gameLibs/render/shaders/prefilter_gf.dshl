
include "shader_global.dshl"

hlsl {
#include "BRDF.hlsl"
#include "monteCarlo.hlsl"
#include "pcg_hash.hlsl"
#include "hammersley.hlsl"
}

int preintegrated_envi_frame = -1;
interval preintegrated_envi_frame : single < 0, first < 1, multiple;

shader preintegrateEnvi
{
  cull_mode = none;
  z_write = false;
  z_test = false;

  USE_POSTFX_VERTEX_POSITIONS()

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float2 tc : TEXCOORD0;
    };
  }

  hlsl(vs) {
    VsOutput integrate_vs(uint vertex_id : SV_VertexID)
    {
      VsOutput output;
      float2 pos = getPostfxVertexPositionById(vertex_id);
      output.pos = float4(pos.xy, 0, 1);
      output.tc = pos.xy;

      return output;
    }
  }
  if (preintegrated_envi_frame == multiple)
  {
    (ps) {
      preintegrated_envi_frame@i1 = preintegrated_envi_frame;
    }
    color_write = rg;
    blend_src = sa;
    blend_dst = isa;
  } else
  {
    no_ablend;
    color_write = rgb;
  }

  //use PS4_DEF_TARGET_FMT_UNORM16_ABGR() with G16R16

  hlsl(ps) {
    ##if preintegrated_envi_frame == single
      #define preintegrated_envi_frame 0
      #define VARIABLE_SAMPLES 1
      #define NEED_DIFFUSE 1
      #define RANDOM 0
      #define ret_type result_float3
      #define make_ret_type make_result_float3
    ##elif preintegrated_envi_frame == first
      #define preintegrated_envi_frame 0
      #define NEED_DIFFUSE 1
      #define RANDOM 0
      #define ret_type result_float3
      #define make_ret_type make_result_float3
    ##else
      #define RANDOM 1
      #define ret_type float4
      float4 make_ret_type(float3 v) {return float4(v, 1./(preintegrated_envi_frame+1));}
    ##endif
    float3 preintegrateBRDF( uint2 rand, float linear_roughness, float NoV )
    {
      float3 V;
      float linearRoughness = linear_roughness;
      float ggxAlpha = linearRoughness*linearRoughness;
      V.x = sqrt( 1.0f - NoV * NoV ); // sin
      V.y = 0;
      V.z = NoV;            // cos

      float A = 0;
      float B = 0;
      float diffuseFresnel = 0;
      #define loop_uint uint

      #if VARIABLE_SAMPLES
        #define MIN_NUM_FILTER_SAMPLES_BITS 6
        #define MAX_NUM_FILTER_SAMPLES_BITS 10
        #define MIN_NUM_FILTER_SAMPLES (1<<MIN_NUM_FILTER_SAMPLES_BITS)
        #define MAX_NUM_FILTER_SAMPLES (1<<MAX_NUM_FILTER_SAMPLES_BITS)

        //loop_uint NUM_FILTER_SAMPLES = 4096;//MIN_NUM_FILTER_SAMPLES+(MAX_NUM_FILTER_SAMPLES-MIN_NUM_FILTER_SAMPLES)*(1-(NoV));
        //loop_uint NUM_FILTER_SAMPLES = MIN_NUM_FILTER_SAMPLES+(MAX_NUM_FILTER_SAMPLES-MIN_NUM_FILTER_SAMPLES)*linear_roughness;
        //loop_uint NUM_FILTER_SAMPLES = 1u<<uint((lerp(MIN_NUM_FILTER_SAMPLES_BITS, MAX_NUM_FILTER_SAMPLES_BITS, max(1-NoV, linear_roughness)) + 0.5));
        loop_uint NUM_FILTER_SAMPLES = MIN_NUM_FILTER_SAMPLES+(MAX_NUM_FILTER_SAMPLES-MIN_NUM_FILTER_SAMPLES)*max(1-NoV, linear_roughness);
      #else
        //this is actually converges only at 1024-2048 samples.
        //so, instead of trying to achieve final result immediately, we can use multi-frame convergence. 128 samples * 64frames will give us a lot of samples samples
        loop_uint NUM_FILTER_SAMPLES = 128;
      #endif

      LOOP
      for( loop_uint i = 0; i < NUM_FILTER_SAMPLES; i++ )
      {
        #if RANDOM
          float2 E = hammersley_rand16( uint(i), NUM_FILTER_SAMPLES, rand );
        #else
          float2 E = hammersley(uint(i), NUM_FILTER_SAMPLES);
        #endif

        {
          float3 H = importance_sample_GGX_NDF( E, linearRoughness ).xyz;
          if (linearRoughness < 0.9/32)// as smooth as it gets. No need for importanse sampling, which became unstable
            H  = float3(0,0,1);
          float3 L = 2 * dot( V, H ) * H - V;

          float NoL = saturate( L.z );
          float NoH = saturate( H.z );
          float VoH = saturate( dot( V, H ) );
          FLATTEN
          if( NoL > 0 )
          {
            float Vis = BRDF_geometricVisibility(ggxAlpha, NoV, NoL, VoH);
            float NoL_Vis_PDF = NoL * Vis * (4 * VoH / NoH);

            float Fc = pow5(1 - VoH);
            A += (1 - Fc) * NoL_Vis_PDF;
            B += Fc * NoL_Vis_PDF;
          }
        }
      }
      #define NUM_DIFFUSE_FILTER_SAMPLES 32
      #if NEED_DIFFUSE
        LOOP
        for( loop_uint di = 0; di < NUM_DIFFUSE_FILTER_SAMPLES; di++ )
        {
          //float2 E = hammersley_rand16( uint(di), NUM_DIFFUSE_FILTER_SAMPLES, rand&0xFFFF );
          float2 E = hammersley(uint(di), NUM_DIFFUSE_FILTER_SAMPLES);
          float3 L = cosine_sample_hemisphere( E ).xyz;
          float3 H = normalize(V + L);
          float NdotL = saturate( L.z );
          float NdotH = saturate( H.z );
          float VdotH = saturate( dot( V, H ) );

          // diffuse Disney preIntegration
          diffuseFresnel += BRDF_diffuse(1, linearRoughness, NoV, NdotL, VdotH, NdotH).x;
        }
      #endif
      return float3(float2( A, B ) * (1.0f/NUM_FILTER_SAMPLES), diffuseFresnel*(1.f/NUM_DIFFUSE_FILTER_SAMPLES));
    }

    ret_type integrate_ps(VsOutput In HW_USE_SCREEN_POS): SV_Target0
    {
      float4 screenpos = GET_SCREEN_POS(In.pos);
      #if RANDOM
      uint2 rand = pcg3d_hash_16bit(uint3(screenpos.xy, preintegrated_envi_frame)).xy;
      #else
      uint2 rand = 0;
      #endif
      float2 tc = (floor(screenpos.xy)+0.5)/float2(128.0, 32.0);//resolution must match same in cpp
      return make_ret_type(preintegrateBRDF( rand, tc.y, tc.x));
    }
  }
  compile("target_vs", "integrate_vs");
  compile("target_ps", "integrate_ps");
}

