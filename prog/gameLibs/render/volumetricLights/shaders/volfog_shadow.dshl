include "sky_shader_global.dshl"
include "heightmap_common.dshl"
include "viewVecVS.dshl"
include "prev_screen_tc.dshl"
include "volfog_common.dshl"
include "volfog_hardcoded_media.dshl"

texture volfog_shadow_occlusion;
texture prev_volfog_shadow;

texture volfog_shadow;

int volfog_ss_accumulated_shadow_const_no = 6 always_referenced;

float4 volfog_shadow_res = (1,1,1,1);
float volfog_shadow_accumulation_factor = 0.9;
float volfog_prev_range_ratio;

shader volfog_shadow_cs
{
  INIT_JITTER_PARAMS(cs)
  INIT_AND_USE_VOLFOG_MODIFIERS(cs)
  GET_MEDIA_HARDCODED(cs)
  VOLUME_DEPTH_CONVERSION(cs)
  INIT_TRANSFORMED_ZNZFAR_STAGE(cs)
  VIEW_VEC_OPTIMIZED(cs)
  USE_PREV_TC(cs)
  ENABLE_ASSERT(cs)

  (cs) {
    world_view_pos@f4 = (world_view_pos.x, world_view_pos.y, world_view_pos.z, time_phase(0,0));
    from_sun_direction@f3 = from_sun_direction;

    prev_volfog_shadow@smp3d = prev_volfog_shadow;
    volfog_shadow_res@f4 = volfog_shadow_res;
    volfog_shadow_accumulation_factor@f1 = volfog_shadow_accumulation_factor;

    frame_id@f1 = jitter_ray_offset.w;
    volfog_prev_range_ratio@f1 = volfog_prev_range_ratio;

    volfog_shadow@uav: register(volfog_ss_accumulated_shadow_const_no) hlsl {
      RWTexture3D<float4> volfog_shadow@uav;
    }

    volfog_shadow_occlusion@tex2d = volfog_shadow_occlusion;
  }

  hlsl(cs) {

    float3 calcViewVec(float2 screen_tc)
    {
      return getViewVecOptimized(screen_tc);
    }

    #include "volfog_shadow.hlsl"

    [numthreads( MEDIA_WARP_SIZE_X, MEDIA_WARP_SIZE_Y, MEDIA_WARP_SIZE_Z )]
    void fill_volfog_shadow_cs( uint3 dtId : SV_DispatchThreadID )
    {
      uint3 res = (uint3)volfog_shadow_res;
      if (any(dtId >= res))
        return;

      volfog_shadow[dtId] = calc_final_volfog_shadow(dtId);
    }
  }
  compile("target_cs", "fill_volfog_shadow_cs");
}
