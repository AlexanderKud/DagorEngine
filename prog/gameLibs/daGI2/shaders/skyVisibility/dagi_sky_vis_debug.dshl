include "shader_global.dshl"
include "dagi_sky_vis_common.dshl"
include "frustum.dshl"

int dagi_sky_vis_debug_type;

shader dagi_sky_vis_draw_debug
{
  supports global_const_block;
  supports global_frame;
  supports none;
  (vs) {
    globtm@f44 = globtm;
    dagi_sky_vis_debug_type@i1 = dagi_sky_vis_debug_type;
  }
  ENABLE_ASSERT(ps)
  DAGI_SKY_VIS_CLIPMAP_MATH(vs)
  DAGI_SKY_VIS_CLIPMAP_MATH(ps)
  DAGI_SKY_VIS_SRV(ps)
  INIT_AND_USE_FRUSTUM_CHECK_BASE(vs)
  hlsl {
    #include "spheres_vertices.hlsl"
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float3 norm:  TEXCOORD1;
      nointerpolation uint3 probeTarget : TEXCOORD2;
    };
  }

  hlsl(vs) {
    VsOutput test_vs(uint iId : SV_InstanceID, uint vertId : SV_VertexID)
    {
      VsOutput output = (VsOutput)0;
      output.pos = NaN;
      uint clip = dagi_sky_vis_debug_type;
      uint3 targetCoord = uint3(iId%dagi_sky_vis_get_clip_size().x, (iId/dagi_sky_vis_get_clip_size().x)%dagi_sky_vis_get_clip_size().x, iId/(dagi_sky_vis_get_clip_size().x*dagi_sky_vis_get_clip_size().x));
      int3 coord = dagi_sky_vis_abs_coord_from_wrapped_coord(targetCoord, clip);
      float probeSize = dagi_sky_vis_probe_size(clip);

      float3 center = (coord.xzy+0.5f)*probeSize;

      float size_scale = 0.05*probeSize;
      if (!testSphereB(center, size_scale))
        return output;
      float3 pos = get_sphere_vertex_pos_low(vertId);
      float3 worldPos = center + pos * size_scale;

      output.probeTarget = targetCoord + uint3(0,0,1 + clip*dagi_sky_vis_get_clip_size_with_border());
      output.norm = pos;
      output.pos = mul(float4(worldPos, 1), globtm);
      return output;
    }
  }

  INIT_HDR(ps)
  USE_HDR(ps)
  hlsl(ps) {
    #include <sh1.hlsl>
    half3 test_ps(VsOutput input HW_USE_SCREEN_POS):SV_Target0
    {
      float4 sh1 = texture3DAt(dagi_sky_visibility_sph, input.probeTarget);
      float3 dir = normalize(input.norm);
      //float vis = dot(sh1, diffuse_transfer_sh1(dir));
      float vis = dot(sh1, float4(1, dir.yzx));
      return pack_hdr(saturate(vis));
    }
  }
  compile("target_vs", "test_vs");
  compile("target_ps", "test_ps");
}
