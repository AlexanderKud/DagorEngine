include "shader_global.dshl"
include "dagi_irrad_grid_sample.dshl"
include "frustum.dshl"

int dagi_irrad_grid_debug_type;

shader dagi_irrad_grid_draw_debug
{
  ENABLE_ASSERT(ps)
  supports global_const_block;
  supports global_frame;
  supports none;
  (vs) {
    globtm@f44 = globtm;
    dagi_irrad_grid_debug_type@i1 = dagi_irrad_grid_debug_type;
  }
  DAGI_IRRAD_GRID_CLIPMAP_MATH(vs)
  DAGI_IRRADIANCE_GRID_SAMPLE(ps)
  INIT_AND_USE_FRUSTUM_CHECK_BASE(vs)
  INIT_HDR(ps)
  USE_HDR(ps)
  hlsl {
    #include "spheres_vertices.hlsl"
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float3 norm:  TEXCOORD1;
      nointerpolation uint4 probeTarget : TEXCOORD2;
    };
  }

  hlsl(vs) {
    VsOutput test_vs(uint iId : SV_InstanceID, uint vertId : SV_VertexID)
    {
      VsOutput output = (VsOutput)0;
      output.pos = NaN;
      uint clip = dagi_irrad_grid_debug_type;
      uint3 targetCoord = uint3(iId%dagi_irrad_grid_get_clip_size().x, (iId/dagi_irrad_grid_get_clip_size().x)%dagi_irrad_grid_get_clip_size().x, iId/(dagi_irrad_grid_get_clip_size().x*dagi_irrad_grid_get_clip_size().x));
      int3 coord = dagi_irrad_grid_abs_coord_from_wrapped_coord(targetCoord, clip);
      float probeSize = dagi_irrad_grid_probe_size(clip);

      float3 center = (coord.xzy+0.5f)*probeSize;
      //uint sdfStartClip = 0;
      //world_sdf_trace_stepOut(center, max(0.125*probeSize, 0.01), 0.5, sdfStartClip);

      float size_scale = 0.05*probeSize;
      if (!testSphereB(center, size_scale))
        return output;
      float3 pos = get_sphere_vertex_pos_low(vertId);
      float3 worldPos = center + pos * size_scale;

      output.probeTarget = uint4(targetCoord, clip);
      output.norm = pos;
      output.pos = mul(float4(worldPos, 1), globtm);
      return output;
    }
  }

  hlsl(ps) {
    #include "sh1.hlsl"
    half3 test_ps(VsOutput input HW_USE_SCREEN_POS):SV_Target0
    {
      float3 dir = normalize(input.norm);

      uint3 t = input.probeTarget.xyz;
      t.z += 1 + input.probeTarget.w*dagi_irrad_grid_get_clip_size_with_border();
      float3 ambient = texture3DAt(dagi_irradiance_grid_sph0, t).xyz;
      float4 directional = texture3DAt(dagi_irradiance_grid_sph1, t);
      SH1 sh1 = decode_sh1_luminance(ambient, directional);

      return pack_hdr(sh1_premul_exp1_irradiance(sh1, dir));
    }
  }
  compile("target_vs", "test_vs");
  compile("target_ps", "test_ps");
}
