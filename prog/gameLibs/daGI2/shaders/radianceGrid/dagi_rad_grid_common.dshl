int4 dagi_rad_grid_clipmap_sizei;
int4 dagi_rad_grid_clipmap_sizei_np2;
int4 dagi_rad_grid_update_lt_coord;
int4 dagi_rad_grid_update_sz_coord;
int4 dagi_rad_grid_clipmap_lt_coord_0;
int4 dagi_rad_grid_clipmap_lt_coord_1;
int4 dagi_rad_grid_clipmap_lt_coord_2;
int4 dagi_rad_grid_clipmap_lt_coord_3;
float4 dagi_rad_grid_decode_xy;
float4 dagi_rad_grid_decode_z;
texture dagi_radiance_grid;
texture dagi_radiance_grid_dist;

texture dagi_radiance_grid_probes_age;

macro DAGI_RAD_GRID_CLIPMAP_MATH_INIT(code)
  (code) {
    dagi_rad_grid_clipmap_sizei@i4 = dagi_rad_grid_clipmap_sizei;
    dagi_rad_grid_clipmap_sizei_np2@i4 = dagi_rad_grid_clipmap_sizei_np2;
    dagi_rad_grid_clipmap_lt_coord@i4[] = {dagi_rad_grid_clipmap_lt_coord_0, dagi_rad_grid_clipmap_lt_coord_1, dagi_rad_grid_clipmap_lt_coord_2, dagi_rad_grid_clipmap_lt_coord_3, dagi_irrad_grid_clipmap_lt_invalid};
  }
endmacro

macro DAGI_RAD_GRID_CLIPMAP_MATH_USE(code)
  hlsl (code) {
    #include "dagi_rad_grid.hlsli"
    uint2 dagi_rad_grid_get_clip_size() {return uint2(dagi_rad_grid_clipmap_sizei.xy);}
    uint2 dagi_rad_grid_get_clip_size_np2() {return uint2(dagi_rad_grid_clipmap_sizei_np2.xy);}
    uint dagi_rad_grid_get_clip_count() {return dagi_rad_grid_clipmap_sizei.z;}
    uint dagi_rad_grid_full_atlas_depth() {return dagi_rad_grid_clipmap_sizei.w;}
    uint dagi_rad_grid_get_radiance_res() {return DAGI_RAD_GRID_OCT_RES;}
    uint dagi_rad_grid_age_address(uint3 coord) {return coord.x + (coord.y + coord.z*dagi_rad_grid_get_clip_size().x)*dagi_rad_grid_get_clip_size().x;}

    #define sample_dagi_rad_grid_clipmap_lt_coord(clip) _sample_dagi_rad_grid_clipmap_lt_coord(clip, _FILE_, __LINE__)
    int4 _sample_dagi_rad_grid_clipmap_lt_coord(uint clip, int file, int ln)
    {
      // 5 is hardcoded currently. TODO: support array size in preshader for such checks.
      ##assert(clip < 5, "[%s:%.f] Out of bounds: Buffer 'dagi_rad_grid_clipmap_lt_coord' has size 5, but access to (%.f)", file, ln, clip);
      return dagi_rad_grid_clipmap_lt_coord[clip];
    }

    int3 dagi_rad_grid_abs_coord_lt(uint clip) {return sample_dagi_rad_grid_clipmap_lt_coord(clip).xyz;}
    float dagi_rad_grid_probe_size(uint clip) {return asfloat(sample_dagi_rad_grid_clipmap_lt_coord(clip).w);}

    float3 dagi_rad_grid_abs_coordi_to_world_pos(int3 coord, uint clip)
    {
      return (coord.xzy+0.5)*dagi_rad_grid_probe_size(clip);
    }

    float3 dagi_rad_grid_world_pos_to_abs_coord(float3 worldPos, uint clip)
    {
      return worldPos.xzy/dagi_rad_grid_probe_size(clip);
    }

    uint3 dagi_rad_grid_wrapped_coord_from_abs_coord(int3 abs_coord)
    {
      #if DAGI_RAD_GRID_ALLOW_NON_POW2
      //non-pow2
      return uint3(dagi_rad_grid_clipmap_sizei_np2.zzw + abs_coord)%uint3(dagi_rad_grid_clipmap_sizei_np2.xxy);
      #endif
      //pow2
      return uint3(abs_coord)%dagi_rad_grid_get_clip_size().xxy;
    }

    float3 dagi_rad_grid_wrapped_coord_from_abs_coordF(float3 abs_coord)
    {
      #if DAGI_RAD_GRID_ALLOW_NON_POW2
      //non-pow2
      return float3(dagi_rad_grid_clipmap_sizei_np2.zzw + abs_coord)%float3(dagi_rad_grid_clipmap_sizei_np2.xxy);
      #endif
      //pow2
      return abs_coord%float3(dagi_rad_grid_get_clip_size().xxy);
    }

    int3 dagi_rad_grid_abs_coord_from_wrapped_coord(uint3 wrapped, int3 clip_lt)
    {
      #if DAGI_RAD_GRID_ALLOW_NON_POW2
      //non-pow2
      return clip_lt + int3(uint3(int3(wrapped) - clip_lt.xyz + dagi_rad_grid_clipmap_sizei_np2.zzw)%uint3(dagi_rad_grid_clipmap_sizei_np2.xxy));
      #endif
      //pow2
      return clip_lt + int3(uint3(int3(wrapped) - clip_lt.xyz)%dagi_rad_grid_get_clip_size().xxy);
    }

    int3 dagi_rad_grid_abs_coord_from_wrapped_coord(uint3 wrapped, uint clip)
    {
      return dagi_rad_grid_abs_coord_from_wrapped_coord(wrapped, sample_dagi_rad_grid_clipmap_lt_coord(clip).xyz);
    }

    uint dagi_rad_grid_get_best_enclosing_clip(float3 worldPos, out float3 coordF, uint start)
    {
      uint i = start;
      LOOP
      do {
        int4 lt = sample_dagi_rad_grid_clipmap_lt_coord(i);
        coordF = worldPos.xzy/asfloat(lt.w);
        int3 coord = floor(coordF);
        if (all(uint3(coord - lt.xyz) < dagi_rad_grid_get_clip_size().xxy))
          return i;
        ++i;// moving that to while () causes invalid sahder compilation on dx11
      } while (i < dagi_rad_grid_get_clip_count());
      return DAGI_MAX_RAD_GRID_CLIPS;
    }

    uint dagi_rad_grid_get_best_enclosing_clip(float3 worldPos, uint start = 0)
    {
      float3 coordF;
      return dagi_rad_grid_get_best_enclosing_clip(worldPos, coordF, start);
    }
    //fixme: we need trilinear
    uint dagi_rad_grid_get_best_enclosing_clip_border(float3 worldPos, uint start = 0, float border = 0.5)
    {
      uint i = start;
      LOOP
      do {
        int4 lt = sample_dagi_rad_grid_clipmap_lt_coord(i);
        float3 coordF = worldPos.xzy/asfloat(lt.w) - lt.xyz;//fixme: can be one madd
        if (all(and(coordF > border, coordF < dagi_rad_grid_get_clip_size().xxy - border)))
          return i;
        ++i;// moving that to while () causes invalid sahder compilation on dx11
      } while (i < dagi_rad_grid_get_clip_count());
      return DAGI_MAX_RAD_GRID_CLIPS;
    }
  }
endmacro

macro DAGI_RAD_GRID_CLIPMAP_MATH(code)
  DAGI_RAD_GRID_CLIPMAP_MATH_INIT(code)
  DAGI_RAD_GRID_CLIPMAP_MATH_USE(code)
endmacro

macro DAGI_RAD_GRID_SRV(code)
  (code) {
    dagi_radiance_grid@smp3d = dagi_radiance_grid;
    //dagi_radiance_grid_dist@smp3d = dagi_radiance_grid_dist;
  }
endmacro

macro DAGI_RAD_GRID_UAV(code)
  (code) {
    dagi_radiance_grid@uav = dagi_radiance_grid hlsl {
      RWTexture3D<float3> dagi_radiance_grid@uav;
    };
    //dagi_radiance_grid_dist@uav = dagi_radiance_grid_dist hlsl {
    //  RWTexture3D<float2> dagi_radiance_grid_dist@uav;
    //};
  }
endmacro

macro DAGI_RAD_GRID_LOAD(code)
  hlsl(code) {
    uint3 rad_grid_to_target_coord(uint cascade, int3 absCoordI, uint2 octCoord)
    {
      uint3 targetProbeCoord = dagi_rad_grid_wrapped_coord_from_abs_coord(absCoordI);
      targetProbeCoord.xy = targetProbeCoord.xy*dagi_rad_grid_get_radiance_res() + octCoord;
      targetProbeCoord.z += cascade*dagi_rad_grid_get_clip_size().y;
      return targetProbeCoord;
    }
    float3 trilinear_load_radiance_grid_cascade_unsafe(uint cascade, uint2 octCoord, float3 worldPos)
    {
      float3 absCoordF = dagi_rad_grid_world_pos_to_abs_coord(worldPos, cascade);
      absCoordF -= 0.5;
      //int4 lt = dagi_rad_grid_clipmap_lt_coord[cascade];
      int3 absCoordI = floor(absCoordF);
      float3 fractCoord = frac(absCoordF);
      uint3 wrappedCoord0 = dagi_rad_grid_wrapped_coord_from_abs_coord(absCoordI);
      uint3 wrappedCoord1 = (wrappedCoord0+1u)%dagi_rad_grid_get_clip_size_np2().xxy;
      wrappedCoord0.xy = wrappedCoord0.xy*dagi_rad_grid_get_radiance_res() + octCoord;
      wrappedCoord1.xy = wrappedCoord1.xy*dagi_rad_grid_get_radiance_res() + octCoord;
      wrappedCoord0.z  += cascade*dagi_rad_grid_get_clip_size().y;
      wrappedCoord1.z  += cascade*dagi_rad_grid_get_clip_size().y;
      return
        lerp(
          lerp(lerp(
            texture3DAt(dagi_radiance_grid, uint3(wrappedCoord0.x, wrappedCoord0.y, wrappedCoord0.z)).xyz,
            texture3DAt(dagi_radiance_grid, uint3(wrappedCoord1.x, wrappedCoord0.y, wrappedCoord0.z)).xyz, fractCoord.x),
               lerp(
                texture3DAt(dagi_radiance_grid, uint3(wrappedCoord0.x, wrappedCoord1.y, wrappedCoord0.z)).xyz,
                texture3DAt(dagi_radiance_grid, uint3(wrappedCoord1.x, wrappedCoord1.y, wrappedCoord0.z)).xyz, fractCoord.x),
               fractCoord.y),
          lerp(lerp(
            texture3DAt(dagi_radiance_grid, uint3(wrappedCoord0.x, wrappedCoord0.y, wrappedCoord1.z)).xyz,
            texture3DAt(dagi_radiance_grid, uint3(wrappedCoord1.x, wrappedCoord0.y, wrappedCoord1.z)).xyz, fractCoord.x),
               lerp(
                texture3DAt(dagi_radiance_grid, uint3(wrappedCoord0.x, wrappedCoord1.y, wrappedCoord1.z)).xyz,
                texture3DAt(dagi_radiance_grid, uint3(wrappedCoord1.x, wrappedCoord1.y, wrappedCoord1.z)).xyz, fractCoord.x),
               fractCoord.y),
        fractCoord.z);
    }
  }
endmacro

macro DAGI_RAD_GRID_SAMPLE_INIT_CONSTS(code)
  DAGI_RAD_GRID_CLIPMAP_MATH_INIT(code)
  (code) {
    dagi_rad_grid_decode_z@f4 = dagi_rad_grid_decode_z;
    dagi_rad_grid_decode_xy@f3 = dagi_rad_grid_decode_xy;
  }
endmacro

macro DAGI_RAD_GRID_SAMPLE_INIT(code)
  DAGI_RAD_GRID_SRV(code)
  DAGI_RAD_GRID_SAMPLE_INIT_CONSTS(code)
endmacro

macro DAGI_RAD_GRID_SAMPLE_USE(code)
  DAGI_RAD_GRID_CLIPMAP_MATH_USE(code)
  DAGI_RAD_GRID_LOAD(code)
  hlsl(code) {
    #include "dagi_rad_grid_math.hlsl"
    float3 dagi_rad_sample(float3 tc) {return tex3Dlod(dagi_radiance_grid, float4(tc,0)).xyz;}
    float3 dagi_trilinear_sample_radiance_grid_cascade_unsafe_oct(uint cascade, float3 dir, float3 worldPos)
    {
      float3 octUVW;
      octUVW.xy = clamp(radiance_grid_dir_encode(dir)*dagi_rad_grid_decode_xy.x + dagi_rad_grid_decode_xy.x, dagi_rad_grid_decode_xy.y, dagi_rad_grid_decode_xy.z);
      octUVW.z = cascade*dagi_rad_grid_decode_z.y + dagi_rad_grid_decode_z.z;
      float3 absCoordF = dagi_rad_grid_world_pos_to_abs_coord(worldPos, cascade);
      absCoordF -= 0.5;
      //int4 lt = dagi_rad_grid_clipmap_lt_coord[cascade];
      int3 absCoordI = floor(absCoordF);
      float3 fractCoord = frac(absCoordF);
      float3 tcBase = frac(absCoordI*dagi_rad_grid_decode_z.wwx);
      float3 tc1 = frac(tcBase + dagi_rad_grid_decode_z.wwx);
      tc1.z *= dagi_rad_grid_decode_z.y;
      tc1 += octUVW;
      tcBase.z *= dagi_rad_grid_decode_z.y;
      float3 tc0 = tcBase + octUVW;
      // uint division is still slower than floating point frac
      //uint3 wrappedCoord0 = dagi_rad_grid_wrapped_coord_from_abs_coord(absCoordI);
      //float2 dec = float2(dagi_rad_grid_decode_z.w, dagi_rad_grid_decode_z.x*dagi_rad_grid_decode_z.y);
      //float3 tc1 = ((wrappedCoord0+1u)%dagi_rad_grid_get_clip_size_np2().xxy)*dec.xxy + octUVW;
      //float3 tc0 = (wrappedCoord0*dec.xxy) + octUVW;
      return
        lerp(
          lerp(lerp(dagi_rad_sample(float3(tc0.x, tc0.y, tc0.z)), dagi_rad_sample(float3(tc1.x, tc0.y, tc0.z)), fractCoord.x),
               lerp(dagi_rad_sample(float3(tc0.x, tc1.y, tc0.z)), dagi_rad_sample(float3(tc1.x, tc1.y, tc0.z)), fractCoord.x),
               fractCoord.y),
          lerp(lerp(dagi_rad_sample(float3(tc0.x, tc0.y, tc1.z)), dagi_rad_sample(float3(tc1.x, tc0.y, tc1.z)), fractCoord.x),
               lerp(dagi_rad_sample(float3(tc0.x, tc1.y, tc1.z)), dagi_rad_sample(float3(tc1.x, tc1.y, tc1.z)), fractCoord.x),
               fractCoord.y),
        fractCoord.z);
    }
    float3 dagi_trilinear_sample_radiance_grid_cascade_unsafe(uint cascade, float3 dir, float3 worldPos)
    {
      return dagi_trilinear_sample_radiance_grid_cascade_unsafe_oct(cascade, dir, worldPos);
    }
  }

endmacro

macro DAGI_RAD_GRID_SAMPLE(code)
  DAGI_RAD_GRID_SAMPLE_INIT(code)
  DAGI_RAD_GRID_SAMPLE_USE(code)
endmacro
