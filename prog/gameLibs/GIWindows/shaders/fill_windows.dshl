include "sky_shader_global.dshl"
include "./dagi_windows.dshl"

//int current_windows_count;
buffer windows_grid_ind;

float4 windowsBoxLt;
float4 windowsBoxRb;
float4 windowsBoxRange;

shader clear_windows_grid_range_cs
{
  supports none;
  supports global_frame;
  (cs) { windowsBoxRange @f4 = windowsBoxRange; }
  ENABLE_ASSERT(cs)
  hlsl(cs) {
    #include <gi_windows.hlsli>
    RWStructuredBuffer<uint>  grid : register(u0);
    [numthreads(4, 4, 4)]
    void grid_windows_cs(uint3 tid : SV_GroupThreadID, uint3 dtId : SV_DispatchThreadID)
    {
      uint3 coord = dtId + uint3(uint(windowsBoxRange.x), 0, uint(windowsBoxRange.y));
      if (any(coord >= uint3(WINDOW_GRID_XZ, WINDOW_GRID_Y, WINDOW_GRID_XZ)))
        return;
      uint gridI = coord.x + coord.y*WINDOW_GRID_XZ + coord.z*(WINDOW_GRID_XZ*WINDOW_GRID_Y);
      structuredBufferAt(grid, gridI) = 0;
    }
  }
  compile("cs_5_0", "grid_windows_cs");
}

shader fill_windows_grid_range_cs, fill_windows_grid_range_fast_cs
{
  ENABLE_ASSERT(cs)
  supports none;
  supports global_frame;
  (cs) {
    windowsGridLT @f4 = windowsGridLT;
    windowsBoxLt @f3 = windowsBoxLt;
    windowsBoxRb @f4 = windowsBoxRb;
    windowsBoxRange @f4 = windowsBoxRange;
    windows@buf = windows hlsl {
      #include <gi_windows.hlsli>
      StructuredBuffer<Window> windows@buf;
    }
    gridInd@buf = windows_grid_ind hlsl {
      StructuredBuffer<uint> gridInd@buf;
    }
  }
  hlsl(cs) {
    #include <transform_box.hlsl>
    RWStructuredBuffer<uint>  grid : register(u0);
    RWStructuredBuffer<uint>  gridCnt : register(u1);
    #define MAX_WINDOWS 8
    #define SUB_WINDOWS 16
    #define SUBDIV_X 2
    #define SUBDIV_Z 2
    groupshared uint thread_result[MAX_WINDOWS*SUBDIV_X*SUBDIV_Z];
    groupshared uint totalWindowsCnt[SUBDIV_X*SUBDIV_Z];
    groupshared uint gridWriteTo[SUBDIV_X*SUBDIV_Z];
    [numthreads(SUBDIV_X, SUB_WINDOWS, SUBDIV_Z)]
    void grid_windows_cs(uint3 tid : SV_GroupThreadID, uint3 gId : SV_GroupID, uint3 dtId : SV_DispatchThreadID)
    {
      uint windowFrameId = tid.y;
      uint3 coord = uint3(dtId.x+uint(windowsBoxRange.x), gId.y, dtId.z+uint(windowsBoxRange.y));
      if (any(coord >= uint3(WINDOW_GRID_XZ, WINDOW_GRID_Y, WINDOW_GRID_XZ)))
        return;
      uint gridI = coord.x + coord.y*WINDOW_GRID_XZ + coord.z*(WINDOW_GRID_XZ*WINDOW_GRID_Y);
      float3 lt = windowsGridLT.xyz + (coord)*windowsGridLT.w;
      float3 rb = lt + windowsGridLT.www;

      float3 center = lt + 0.5*windowsGridLT.www;
      BRANCH
      if (any((rb < windowsBoxLt) || (lt > windowsBoxRb.xyz)))
      {
        if (windowFrameId == 0)
          structuredBufferAt(grid, gridI) = 0;
        return;
      }
      uint window_cnt_i = uint(windowsBoxRange.w);
      uint window_first = uint(windowsBoxRange.z);

      ##if shader != fill_windows_grid_range_fast_cs
        uint window_calc_cnt = (window_cnt_i+SUB_WINDOWS-1)/SUB_WINDOWS;
      ##else
        uint window_calc_cnt = 1;
      ##endif
      uint window_part = window_calc_cnt*windowFrameId;

      uint subGridCoord = tid.x + tid.z*SUBDIV_X;
      totalWindowsCnt[subGridCoord] = 0;
      GroupMemoryBarrier();
      uint windowsCnt = 0;
      ##if shader != fill_windows_grid_range_fast_cs
      for (uint i = window_first+window_part, ei = window_first+min(window_cnt_i, window_part + window_calc_cnt); i < ei && windowsCnt<MAX_WINDOWS; ++i)
      ##else
      uint i = windowFrameId + window_first;
      if (windowFrameId < window_cnt_i)
      ##endif
      {
        uint windowId = gridInd[i];
        Window w = windows[windowId];
        float3 col3 = float3(w.row0.w,w.row1.w,w.row2.w);
        float3 windowC = center - col3;
        BRANCH
        if (!any(windowC<-0.5*windowsGridLT.w-windowsBoxRb.w || windowC>0.5*windowsGridLT.w + windowsBoxRb.w))//window size missing
        {
          float3 col0 = float3(w.row0.x, w.row1.x, w.row2.x);
          float3 col1 = float3(w.row0.y, w.row1.y, w.row2.y);
          float3 col2 = float3(w.row0.z, w.row1.z, w.row2.z);
          float3 tmin, tmax;
          transform_box(tmin, tmax, lt - col3, rb - col3, col0, col1, col2);
          if (!any((tmax < -WINDOW_HALF_LOCAL_BOX) || (tmin > WINDOW_HALF_LOCAL_BOX)))
          {
            uint at;
            InterlockedAdd(totalWindowsCnt[subGridCoord], 1, at);
            if (at<MAX_WINDOWS)
              thread_result[subGridCoord*MAX_WINDOWS + at] = windowId;
            windowsCnt++;
          }
        }
      }
      GroupMemoryBarrier();
      windowsCnt = min(totalWindowsCnt[subGridCoord], MAX_WINDOWS);

      if (windowFrameId == 0)
      {
        uint writeAt = 0;
        InterlockedAdd(gridCnt[0], windowsCnt, writeAt);
        structuredBufferAt(grid, gridI) = windowsCnt ? ((windowsCnt<<24)|writeAt) : 0;
        gridWriteTo[subGridCoord] = writeAt;
      }
      GroupMemoryBarrier();
      uint writeAt = gridWriteTo[subGridCoord];

      if (windowFrameId<windowsCnt)
        structuredBufferAt(grid, WINDOW_GRID_XZ*WINDOW_GRID_XZ*WINDOW_GRID_Y + writeAt + windowFrameId) = thread_result[subGridCoord*MAX_WINDOWS + windowFrameId];
    }
  }
  compile("cs_5_0", "grid_windows_cs");
}
