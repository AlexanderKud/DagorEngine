include "shader_global.dshl"
include "postfx_inc.dshl"

texture video360_copy_source;
texture video360_screen_env;

shader copy_texture
{
  z_write=false;
  z_test=false;
  cull_mode  = none;

  (ps) { source_tex@smp2d = video360_copy_source; }

  POSTFX_VS_TEXCOORD(0, uv)

  hlsl(ps) {
    void main_ps_copy(VsOutput input, out float4 res0 : SV_Target0 )
    {
        res0 = tex2D(source_tex, input.uv);
    }
  }

  compile("target_ps", "main_ps_copy");
}

shader cubemap_to_spherical_projection
{
  blend_src = sa; blend_dst = isa;
  cull_mode  = none;
  z_write=false;
  z_test=false;

  (ps) { source_tex@smpCube = video360_screen_env; }

  POSTFX_VS_TEXCOORD(0, uv)

  hlsl(ps) {
    float4 main_ps_spherical_projection(VsOutput input ):SV_Target
    {
      float theta = -(2.0 * input.uv.x - 1.0) * PI;
      float phi = -(2.0 * input.uv.y - 1.0) * PI / 2.0 ;

      float x = cos(phi) * cos(theta) ;
      float y = sin(phi);
      float z = cos(phi) * sin(theta);

      float3 view = normalize(float3(x,y,z));
      return texCUBElod(source_tex, float4(view,0));
    }
  }

  compile("target_ps", "main_ps_spherical_projection");
}
