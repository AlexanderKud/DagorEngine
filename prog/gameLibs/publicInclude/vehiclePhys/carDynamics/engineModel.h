//
// Dagor Engine 6.5 - Game Libraries
// Copyright (C) Gaijin Games KFT.  All rights reserved.
//
#pragma once

#include "drivelineModel.h"
#include <math/dag_mathBase.h>
#include "polyLineInt.h"

struct CarEngineState
{
  float tEngine = 0.f; // Torque from the engine side

  float curNitroPower = 0.f;
  float targetNitroPower = 0.f;
  float nitroChangeSpeed = 2.f;
};

class CarEngineModel : public CarEngineState, public CarDrivelineElement
{
public:
  CarEngineModel(CarDynamicsModel *car);
  ~CarEngineModel();

  void resetData(); // Reset all vars
  void init();      // Initialize usage of engine
  void prepare();   // Precalculate some variables

  // Definition
  bool load(const DataBlock *blk);

  // Attribs
  float getRPM() { return (getRotVel() / TWOPI) * 60.0f; }
  void setRPM(float rpm);
  float getMaxRPM() { return maxRPM; }
  float getIdleRPM() { return idleRPM; }

  float getEngineTorque() { return tEngine; }
  void setNitro(float target_nitro_power) { targetNitroPower = target_nitro_power; }
  float getNitroMul() { return 1 + curNitroPower; }

  void setThrottle(int ctlThrottle);

  float getThrottleFactor() { return throttle; }

  // Physics
  void calcForces();
  void calcAcc();
  void integrate(float dt);

  void calcMaxPower(float &max_hp, float &rpm_max_hp, float &max_torque, float &rpm_max_torque);

  float calcTorque(float rpm, float in_throttle) const
  {
    return (rpm < maxRPM ? getMaxTorque(rpm) * in_throttle + getMinTorque(rpm) * (1 - in_throttle) : getMinTorque(rpm)) *
           (1 + curNitroPower);
  }

private:
  // Engine torque generation
  float getMinTorque(float rpm) const { return -brakingCoeff * rpm / 60.0f; }
  float getMaxTorque(float rpm) const { return crvTorque.getValue(rpm) * curveTorqueMul; }


private:
  enum Flags
  {
    STALLED = 1,      // Engine is turned off
    HAS_STARTER = 2,  // Start engine present?
    START_STALLED = 4 // When reset, don't autostart engine?
    // AUTOCLUTCH_ACTIVE=8                 // Assist on?
  };

  // Semi-fixed properties
  CarDynamicsModel *car; // The car to which we belong

  // Static data
  int flags;
  float maxRPM,          // Hard maximum
    idleRPM,             // RPM when no throttle/friction
    stallRPM,            // At which point does the engine stall
    startRPM,            // At which point does it turn on again?
    autoClutchRPM;       // When to start applying the clutch
  float brakingCoeff;    // To calculate engine braking
  float idleThrottle,    // Always open by this much 0..1
    throttleRange;       // Effective throttle range
  PolyLineInt crvTorque; // RPM -> max normalized engine torque
  float curveTorqueMul;  // Factor for normalize torque curve
  // float   starterTorque;               // Torque generated by starter

  // Input
  float throttle;
};
