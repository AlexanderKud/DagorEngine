include "project_world_sdf.dshl"

define_macro_if_not_defined PROJECT_WORLD_SDF(code)
  hlsl(code) {
    float get_project_world_sdf(float3 worldPos, float maxDist) {return 1e3;}
  }
endmacro

define_macro_if_not_defined PROJECT_WORLD_SDF_CLEAR(code)
  hlsl(code) {
    void project_world_sdf_clear(int3 world_sdf_coord, int sdf_clip){}
  }
endmacro

define_macro_if_not_defined PROJECT_WORLD_SDF_COPY_SLICE(code)
  hlsl(code) {
    void project_world_sdf_copy_slice(int2 world_coord_xy, int world_sdf_mip, bool zero_slice){}
  }
endmacro


define_macro_if_not_defined PROJECT_WORLD_SDF_RASTERIZE(code)
  hlsl(code) {
    //void project_world_sdf_rasterize_normal_albedo(float3 worldPos, float3 geomNormal, float3 pointNormal, float3 albedo, bool twoSided)
    //void project_world_sdf_rasterize_normal(float3 worldPos, float3 worldNormal)
    #define project_world_sdf_rasterize_normal_albedo(worldPos, geomNormal, pointNormal, albedo, twoSided)
    #define project_world_sdf_rasterize_normal(worldPos, geomNormal, twoSided)

    //void project_world_sdf_rasterize_albedo(WorldSDFInterpolant sdfI, float3 pointNormal, bool usePointNormal, float3 albedo)
    //void project_world_sdf_rasterize(WorldSDFInterpolant sdfI)
    #define project_world_sdf_rasterize_albedo(sdfI, pointNormal, usePointNormal, albedo)
    #define project_world_sdf_rasterize(sdfI)
  }
endmacro
